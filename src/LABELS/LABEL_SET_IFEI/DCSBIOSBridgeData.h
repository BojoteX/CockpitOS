// Auto-generated DCSBIOS Bridge Data (JSONâ€‘only) - DO NOT EDIT
#pragma once

#define DCSBIOS_ACFT_NAME "FA-18C_hornet"
static constexpr const char* DCSBIOS_AIRCRAFT_NAME = "FA-18C_hornet";

enum ControlType : uint8_t {
  CT_LED,
  CT_ANALOG,
  CT_GAUGE,
  CT_SELECTOR,
  CT_DISPLAY,
  CT_METADATA
};

// --- Command History Tracking Struct ---
struct CommandHistoryEntry {
    const char*     label;
    uint16_t        lastValue;
    unsigned long   lastSendTime;
    bool            isSelector;
    uint16_t        group;
    uint16_t        pendingValue;
    unsigned long   lastChangeTime;
    bool            hasPending;
    uint8_t         lastReport[GAMEPAD_REPORT_SIZE];
    uint8_t         pendingReport[GAMEPAD_REPORT_SIZE];
    unsigned long   lastHidSendTime;
};

struct DcsOutputEntry { uint16_t addr, mask; uint8_t shift; uint16_t max_value; const char* label; ControlType controlType; };
static const DcsOutputEntry DcsOutputTable[] = {
    {0x7576,0xFFFF,0,65535,"EXT_FORMATION_LIGHTS",CT_METADATA},
    {0x7586,0xFFFF,0,65535,"EXT_HOOK",CT_METADATA},
    {0x757A,0xFFFF,0,65535,"EXT_NOZZLE_POS_L",CT_METADATA},
    {0x7578,0xFFFF,0,65535,"EXT_NOZZLE_POS_R",CT_METADATA},
    {0x74D6,0x0400,10,1,"EXT_POSITION_LIGHT_LEFT",CT_METADATA},
    {0x74D6,0x0800,11,1,"EXT_POSITION_LIGHT_RIGHT",CT_METADATA},
    {0x7574,0xFFFF,0,65535,"EXT_REFUEL_PROBE",CT_METADATA},
    {0x74D6,0x0200,9,1,"EXT_REFUEL_PROBE_LIGHT",CT_METADATA},
    {0x756E,0xFFFF,0,65535,"EXT_SPEED_BRAKE",CT_METADATA},
    {0x7572,0xFFFF,0,65535,"EXT_STAIR",CT_METADATA},
    {0x74D6,0x2000,13,1,"EXT_STROBE_LIGHTS",CT_METADATA},
    {0x74D6,0x1000,12,1,"EXT_TAIL_LIGHT",CT_METADATA},
    {0x7570,0xFFFF,0,65535,"EXT_WING_FOLDING",CT_METADATA},
    {0x74D8,0x0100,8,1,"EXT_WOW_LEFT",CT_METADATA},
    {0x74D6,0x4000,14,1,"EXT_WOW_NOSE",CT_METADATA},
    {0x74D6,0x8000,15,1,"EXT_WOW_RIGHT",CT_METADATA},
    {0x74DE,0xFFFF,0,65535,"IFEI",CT_ANALOG},
    {0x7466,0x1800,11,2,"MODE_SELECTOR_SW",CT_SELECTOR},
    {0x7466,0x0180,7,2,"SELECT_HMD_LDDI_RDDI",CT_SELECTOR},
    {0x7466,0x0600,9,2,"SELECT_HUD_LDDI_RDDI",CT_SELECTOR},
    {0x7468,0x00FF,0,5,"IFEI_BINGO",CT_DISPLAY},
    {0x7469,0x00FF,0,5,"IFEI_BINGO",CT_DISPLAY},
    {0x746A,0x00FF,0,5,"IFEI_BINGO",CT_DISPLAY},
    {0x746B,0x00FF,0,5,"IFEI_BINGO",CT_DISPLAY},
    {0x746C,0x00FF,0,5,"IFEI_BINGO",CT_DISPLAY},
    {0x74C6,0x00FF,0,1,"IFEI_BINGO_TEXTURE",CT_DISPLAY},
    {0x746E,0x00FF,0,2,"IFEI_CLOCK_H",CT_DISPLAY},
    {0x746F,0x00FF,0,2,"IFEI_CLOCK_H",CT_DISPLAY},
    {0x7470,0x00FF,0,2,"IFEI_CLOCK_M",CT_DISPLAY},
    {0x7471,0x00FF,0,2,"IFEI_CLOCK_M",CT_DISPLAY},
    {0x7472,0x00FF,0,2,"IFEI_CLOCK_S",CT_DISPLAY},
    {0x7473,0x00FF,0,2,"IFEI_CLOCK_S",CT_DISPLAY},
    {0x74AE,0x00FF,0,3,"IFEI_CODES",CT_DISPLAY},
    {0x74AF,0x00FF,0,3,"IFEI_CODES",CT_DISPLAY},
    {0x74B0,0x00FF,0,3,"IFEI_CODES",CT_DISPLAY},
    {0x747A,0x00FF,0,1,"IFEI_DD_1",CT_DISPLAY},
    {0x747C,0x00FF,0,1,"IFEI_DD_2",CT_DISPLAY},
    {0x747E,0x00FF,0,1,"IFEI_DD_3",CT_DISPLAY},
    {0x7480,0x00FF,0,1,"IFEI_DD_4",CT_DISPLAY},
    {0x7466,0x0010,4,1,"IFEI_DWN_BTN",CT_SELECTOR},
    {0x7466,0x0040,6,1,"IFEI_ET_BTN",CT_SELECTOR},
    {0x7482,0x00FF,0,3,"IFEI_FF_L",CT_DISPLAY},
    {0x7483,0x00FF,0,3,"IFEI_FF_L",CT_DISPLAY},
    {0x7484,0x00FF,0,3,"IFEI_FF_L",CT_DISPLAY},
    {0x7486,0x00FF,0,3,"IFEI_FF_R",CT_DISPLAY},
    {0x7487,0x00FF,0,3,"IFEI_FF_R",CT_DISPLAY},
    {0x7488,0x00FF,0,3,"IFEI_FF_R",CT_DISPLAY},
    {0x74C0,0x00FF,0,1,"IFEI_FF_TEXTURE",CT_DISPLAY},
    {0x748A,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x748B,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x748C,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x748D,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x748E,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x748F,0x00FF,0,6,"IFEI_FUEL_DOWN",CT_DISPLAY},
    {0x7490,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x7491,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x7492,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x7493,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x7494,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x7495,0x00FF,0,6,"IFEI_FUEL_UP",CT_DISPLAY},
    {0x74CC,0x00FF,0,1,"IFEI_L0_TEXTURE",CT_DISPLAY},
    {0x74D4,0x00FF,0,1,"IFEI_L100_TEXTURE",CT_DISPLAY},
    {0x74D0,0x00FF,0,1,"IFEI_L50_TEXTURE",CT_DISPLAY},
    {0x74D8,0x00FF,0,1,"IFEI_LPOINTER_TEXTURE",CT_DISPLAY},
    {0x74C8,0x00FF,0,1,"IFEI_LSCALE_TEXTURE",CT_DISPLAY},
    {0x7582,0x00FF,0,1,"IFEI_L_TEXTURE",CT_DISPLAY},
    {0x7466,0x0002,1,1,"IFEI_MODE_BTN",CT_SELECTOR},
    {0x74C2,0x00FF,0,1,"IFEI_NOZ_TEXTURE",CT_DISPLAY},
    {0x7496,0x00FF,0,3,"IFEI_OIL_PRESS_L",CT_DISPLAY},
    {0x7497,0x00FF,0,3,"IFEI_OIL_PRESS_L",CT_DISPLAY},
    {0x7498,0x00FF,0,3,"IFEI_OIL_PRESS_L",CT_DISPLAY},
    {0x749A,0x00FF,0,3,"IFEI_OIL_PRESS_R",CT_DISPLAY},
    {0x749B,0x00FF,0,3,"IFEI_OIL_PRESS_R",CT_DISPLAY},
    {0x749C,0x00FF,0,3,"IFEI_OIL_PRESS_R",CT_DISPLAY},
    {0x74C4,0x00FF,0,1,"IFEI_OIL_TEXTURE",CT_DISPLAY},
    {0x7466,0x0004,2,1,"IFEI_QTY_BTN",CT_SELECTOR},
    {0x74CE,0x00FF,0,1,"IFEI_R0_TEXTURE",CT_DISPLAY},
    {0x74D6,0x00FF,0,1,"IFEI_R100_TEXTURE",CT_DISPLAY},
    {0x74D2,0x00FF,0,1,"IFEI_R50_TEXTURE",CT_DISPLAY},
    {0x749E,0x00FF,0,3,"IFEI_RPM_L",CT_DISPLAY},
    {0x749F,0x00FF,0,3,"IFEI_RPM_L",CT_DISPLAY},
    {0x74A0,0x00FF,0,3,"IFEI_RPM_L",CT_DISPLAY},
    {0x74A2,0x00FF,0,3,"IFEI_RPM_R",CT_DISPLAY},
    {0x74A3,0x00FF,0,3,"IFEI_RPM_R",CT_DISPLAY},
    {0x74A4,0x00FF,0,3,"IFEI_RPM_R",CT_DISPLAY},
    {0x74BC,0x00FF,0,1,"IFEI_RPM_TEXTURE",CT_DISPLAY},
    {0x74DA,0x00FF,0,1,"IFEI_RPOINTER_TEXTURE",CT_DISPLAY},
    {0x74CA,0x00FF,0,1,"IFEI_RSCALE_TEXTURE",CT_DISPLAY},
    {0x7584,0x00FF,0,1,"IFEI_R_TEXTURE",CT_DISPLAY},
    {0x74B2,0x00FF,0,3,"IFEI_SP",CT_DISPLAY},
    {0x74B3,0x00FF,0,3,"IFEI_SP",CT_DISPLAY},
    {0x74B4,0x00FF,0,3,"IFEI_SP",CT_DISPLAY},
    {0x757C,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x757D,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x757E,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x757F,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x7580,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x7581,0x00FF,0,6,"IFEI_T",CT_DISPLAY},
    {0x74A6,0x00FF,0,3,"IFEI_TEMP_L",CT_DISPLAY},
    {0x74A7,0x00FF,0,3,"IFEI_TEMP_L",CT_DISPLAY},
    {0x74A8,0x00FF,0,3,"IFEI_TEMP_L",CT_DISPLAY},
    {0x74AA,0x00FF,0,3,"IFEI_TEMP_R",CT_DISPLAY},
    {0x74AB,0x00FF,0,3,"IFEI_TEMP_R",CT_DISPLAY},
    {0x74AC,0x00FF,0,3,"IFEI_TEMP_R",CT_DISPLAY},
    {0x74BE,0x00FF,0,1,"IFEI_TEMP_TEXTURE",CT_DISPLAY},
    {0x7474,0x00FF,0,2,"IFEI_TIMER_H",CT_DISPLAY},
    {0x7475,0x00FF,0,2,"IFEI_TIMER_H",CT_DISPLAY},
    {0x7476,0x00FF,0,2,"IFEI_TIMER_M",CT_DISPLAY},
    {0x7477,0x00FF,0,2,"IFEI_TIMER_M",CT_DISPLAY},
    {0x7478,0x00FF,0,2,"IFEI_TIMER_S",CT_DISPLAY},
    {0x7479,0x00FF,0,2,"IFEI_TIMER_S",CT_DISPLAY},
    {0x74B6,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x74B7,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x74B8,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x74B9,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x74BA,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x74BB,0x00FF,0,6,"IFEI_TIME_SET_MODE",CT_DISPLAY},
    {0x7466,0x0008,3,1,"IFEI_UP_BTN",CT_SELECTOR},
    {0x7466,0x0020,5,1,"IFEI_ZONE_BTN",CT_SELECTOR},
    {0x74DC,0x00FF,0,1,"IFEI_Z_TEXTURE",CT_DISPLAY},
    {0x754A,0xFFFF,0,65535,"CHART_DIMMER",CT_ANALOG},
    {0x74C8,0x0600,9,2,"COCKKPIT_LIGHT_MODE_SW",CT_SELECTOR},
    {0x7544,0xFFFF,0,65535,"CONSOLES_DIMMER",CT_ANALOG},
    {0x7548,0xFFFF,0,65535,"FLOOD_DIMMER",CT_ANALOG},
    {0x7546,0xFFFF,0,65535,"INST_PNL_DIMMER",CT_ANALOG},
    {0x74C8,0x0800,11,1,"LIGHTS_TEST_SW",CT_SELECTOR},
    {0x754C,0xFFFF,0,65535,"WARN_CAUTION_DIMMER",CT_ANALOG},
    {0x755E,0xFFFF,0,65535,"CHART_INT_LT",CT_GAUGE},
    {0x7558,0xFFFF,0,65535,"CONSOLE_INT_LT",CT_GAUGE},
    {0x74D4,0x2000,13,1,"EMERG_INSTR_INT_LT",CT_LED},
    {0x74D4,0x4000,14,1,"ENG_INSTR_INT_LT",CT_LED},
    {0x755A,0xFFFF,0,65535,"FLOOD_INT_LT",CT_GAUGE},
    {0x7566,0xFFFF,0,65535,"IFEI_BTN_INT_LT",CT_GAUGE},
    {0x7564,0xFFFF,0,65535,"IFEI_DISP_INT_LT",CT_GAUGE},
    {0x7560,0xFFFF,0,65535,"INSTR_INT_LT",CT_GAUGE},
    {0x755C,0xFFFF,0,65535,"NVG_FLOOD_INT_LT",CT_GAUGE},
    {0x7562,0xFFFF,0,65535,"STBY_COMPASS_INT_LT",CT_GAUGE},
};
static const size_t DcsOutputTableSize = sizeof(DcsOutputTable)/sizeof(DcsOutputTable[0]);

// Static flat address-to-output entry lookup
struct AddressEntry {
  uint16_t addr;
  const DcsOutputEntry* entries[9]; // max entries per address
  uint8_t count;
};

static const AddressEntry dcsAddressTable[] = {
  { 0x7576, { &DcsOutputTable[0] }, 1 },
  { 0x7586, { &DcsOutputTable[1] }, 1 },
  { 0x757A, { &DcsOutputTable[2] }, 1 },
  { 0x7578, { &DcsOutputTable[3] }, 1 },
  { 0x74D6, { &DcsOutputTable[4], &DcsOutputTable[5], &DcsOutputTable[7], &DcsOutputTable[10], &DcsOutputTable[11], &DcsOutputTable[14], &DcsOutputTable[15], &DcsOutputTable[77] }, 8 },
  { 0x7574, { &DcsOutputTable[6] }, 1 },
  { 0x756E, { &DcsOutputTable[8] }, 1 },
  { 0x7572, { &DcsOutputTable[9] }, 1 },
  { 0x7570, { &DcsOutputTable[12] }, 1 },
  { 0x74D8, { &DcsOutputTable[13], &DcsOutputTable[63] }, 2 },
  { 0x74DE, { &DcsOutputTable[16] }, 1 },
  { 0x7466, { &DcsOutputTable[17], &DcsOutputTable[18], &DcsOutputTable[19], &DcsOutputTable[39], &DcsOutputTable[40], &DcsOutputTable[66], &DcsOutputTable[75], &DcsOutputTable[117], &DcsOutputTable[118] }, 9 },
  { 0x7468, { &DcsOutputTable[20] }, 1 },
  { 0x7469, { &DcsOutputTable[21] }, 1 },
  { 0x746A, { &DcsOutputTable[22] }, 1 },
  { 0x746B, { &DcsOutputTable[23] }, 1 },
  { 0x746C, { &DcsOutputTable[24] }, 1 },
  { 0x74C6, { &DcsOutputTable[25] }, 1 },
  { 0x746E, { &DcsOutputTable[26] }, 1 },
  { 0x746F, { &DcsOutputTable[27] }, 1 },
  { 0x7470, { &DcsOutputTable[28] }, 1 },
  { 0x7471, { &DcsOutputTable[29] }, 1 },
  { 0x7472, { &DcsOutputTable[30] }, 1 },
  { 0x7473, { &DcsOutputTable[31] }, 1 },
  { 0x74AE, { &DcsOutputTable[32] }, 1 },
  { 0x74AF, { &DcsOutputTable[33] }, 1 },
  { 0x74B0, { &DcsOutputTable[34] }, 1 },
  { 0x747A, { &DcsOutputTable[35] }, 1 },
  { 0x747C, { &DcsOutputTable[36] }, 1 },
  { 0x747E, { &DcsOutputTable[37] }, 1 },
  { 0x7480, { &DcsOutputTable[38] }, 1 },
  { 0x7482, { &DcsOutputTable[41] }, 1 },
  { 0x7483, { &DcsOutputTable[42] }, 1 },
  { 0x7484, { &DcsOutputTable[43] }, 1 },
  { 0x7486, { &DcsOutputTable[44] }, 1 },
  { 0x7487, { &DcsOutputTable[45] }, 1 },
  { 0x7488, { &DcsOutputTable[46] }, 1 },
  { 0x74C0, { &DcsOutputTable[47] }, 1 },
  { 0x748A, { &DcsOutputTable[48] }, 1 },
  { 0x748B, { &DcsOutputTable[49] }, 1 },
  { 0x748C, { &DcsOutputTable[50] }, 1 },
  { 0x748D, { &DcsOutputTable[51] }, 1 },
  { 0x748E, { &DcsOutputTable[52] }, 1 },
  { 0x748F, { &DcsOutputTable[53] }, 1 },
  { 0x7490, { &DcsOutputTable[54] }, 1 },
  { 0x7491, { &DcsOutputTable[55] }, 1 },
  { 0x7492, { &DcsOutputTable[56] }, 1 },
  { 0x7493, { &DcsOutputTable[57] }, 1 },
  { 0x7494, { &DcsOutputTable[58] }, 1 },
  { 0x7495, { &DcsOutputTable[59] }, 1 },
  { 0x74CC, { &DcsOutputTable[60] }, 1 },
  { 0x74D4, { &DcsOutputTable[61], &DcsOutputTable[129], &DcsOutputTable[130] }, 3 },
  { 0x74D0, { &DcsOutputTable[62] }, 1 },
  { 0x74C8, { &DcsOutputTable[64], &DcsOutputTable[121], &DcsOutputTable[125] }, 3 },
  { 0x7582, { &DcsOutputTable[65] }, 1 },
  { 0x74C2, { &DcsOutputTable[67] }, 1 },
  { 0x7496, { &DcsOutputTable[68] }, 1 },
  { 0x7497, { &DcsOutputTable[69] }, 1 },
  { 0x7498, { &DcsOutputTable[70] }, 1 },
  { 0x749A, { &DcsOutputTable[71] }, 1 },
  { 0x749B, { &DcsOutputTable[72] }, 1 },
  { 0x749C, { &DcsOutputTable[73] }, 1 },
  { 0x74C4, { &DcsOutputTable[74] }, 1 },
  { 0x74CE, { &DcsOutputTable[76] }, 1 },
  { 0x74D2, { &DcsOutputTable[78] }, 1 },
  { 0x749E, { &DcsOutputTable[79] }, 1 },
  { 0x749F, { &DcsOutputTable[80] }, 1 },
  { 0x74A0, { &DcsOutputTable[81] }, 1 },
  { 0x74A2, { &DcsOutputTable[82] }, 1 },
  { 0x74A3, { &DcsOutputTable[83] }, 1 },
  { 0x74A4, { &DcsOutputTable[84] }, 1 },
  { 0x74BC, { &DcsOutputTable[85] }, 1 },
  { 0x74DA, { &DcsOutputTable[86] }, 1 },
  { 0x74CA, { &DcsOutputTable[87] }, 1 },
  { 0x7584, { &DcsOutputTable[88] }, 1 },
  { 0x74B2, { &DcsOutputTable[89] }, 1 },
  { 0x74B3, { &DcsOutputTable[90] }, 1 },
  { 0x74B4, { &DcsOutputTable[91] }, 1 },
  { 0x757C, { &DcsOutputTable[92] }, 1 },
  { 0x757D, { &DcsOutputTable[93] }, 1 },
  { 0x757E, { &DcsOutputTable[94] }, 1 },
  { 0x757F, { &DcsOutputTable[95] }, 1 },
  { 0x7580, { &DcsOutputTable[96] }, 1 },
  { 0x7581, { &DcsOutputTable[97] }, 1 },
  { 0x74A6, { &DcsOutputTable[98] }, 1 },
  { 0x74A7, { &DcsOutputTable[99] }, 1 },
  { 0x74A8, { &DcsOutputTable[100] }, 1 },
  { 0x74AA, { &DcsOutputTable[101] }, 1 },
  { 0x74AB, { &DcsOutputTable[102] }, 1 },
  { 0x74AC, { &DcsOutputTable[103] }, 1 },
  { 0x74BE, { &DcsOutputTable[104] }, 1 },
  { 0x7474, { &DcsOutputTable[105] }, 1 },
  { 0x7475, { &DcsOutputTable[106] }, 1 },
  { 0x7476, { &DcsOutputTable[107] }, 1 },
  { 0x7477, { &DcsOutputTable[108] }, 1 },
  { 0x7478, { &DcsOutputTable[109] }, 1 },
  { 0x7479, { &DcsOutputTable[110] }, 1 },
  { 0x74B6, { &DcsOutputTable[111] }, 1 },
  { 0x74B7, { &DcsOutputTable[112] }, 1 },
  { 0x74B8, { &DcsOutputTable[113] }, 1 },
  { 0x74B9, { &DcsOutputTable[114] }, 1 },
  { 0x74BA, { &DcsOutputTable[115] }, 1 },
  { 0x74BB, { &DcsOutputTable[116] }, 1 },
  { 0x74DC, { &DcsOutputTable[119] }, 1 },
  { 0x754A, { &DcsOutputTable[120] }, 1 },
  { 0x7544, { &DcsOutputTable[122] }, 1 },
  { 0x7548, { &DcsOutputTable[123] }, 1 },
  { 0x7546, { &DcsOutputTable[124] }, 1 },
  { 0x754C, { &DcsOutputTable[126] }, 1 },
  { 0x755E, { &DcsOutputTable[127] }, 1 },
  { 0x7558, { &DcsOutputTable[128] }, 1 },
  { 0x755A, { &DcsOutputTable[131] }, 1 },
  { 0x7566, { &DcsOutputTable[132] }, 1 },
  { 0x7564, { &DcsOutputTable[133] }, 1 },
  { 0x7560, { &DcsOutputTable[134] }, 1 },
  { 0x755C, { &DcsOutputTable[135] }, 1 },
  { 0x7562, { &DcsOutputTable[136] }, 1 },
};

// Address hash entry
struct DcsAddressHashEntry {
  uint16_t addr;
  const AddressEntry* entry;
};

static const DcsAddressHashEntry dcsAddressHashTable[239] = {
  { 0x74B3, &dcsAddressTable[76] },
  { 0x74B4, &dcsAddressTable[77] },
  { 0x74A7, &dcsAddressTable[85] },
  { 0x74A8, &dcsAddressTable[86] },
  { 0x74AA, &dcsAddressTable[87] },
  { 0x74AB, &dcsAddressTable[88] },
  { 0x74AC, &dcsAddressTable[89] },
  { 0x74B6, &dcsAddressTable[97] },
  { 0x74B7, &dcsAddressTable[98] },
  { 0x74BC, &dcsAddressTable[71] },
  { 0x74B8, &dcsAddressTable[99] },
  { 0x74BE, &dcsAddressTable[90] },
  { 0x74B9, &dcsAddressTable[100] },
  { 0x74C0, &dcsAddressTable[37] },
  { 0x74BA, &dcsAddressTable[101] },
  { 0x74C2, &dcsAddressTable[55] },
  { 0x74BB, &dcsAddressTable[102] },
  { 0x74C4, &dcsAddressTable[62] },
  { 0x7566, &dcsAddressTable[112] },
  { 0x74C6, &dcsAddressTable[17] },
  { 0x7564, &dcsAddressTable[113] },
  { 0x74C8, &dcsAddressTable[53] },
  { 0x7560, &dcsAddressTable[114] },
  { 0x74CA, &dcsAddressTable[73] },
  { 0x755C, &dcsAddressTable[115] },
  { 0x74CC, &dcsAddressTable[50] },
  { 0x7562, &dcsAddressTable[116] },
  { 0x74CE, &dcsAddressTable[63] },
  {0xFFFF, nullptr},
  { 0x74D0, &dcsAddressTable[52] },
  {0xFFFF, nullptr},
  { 0x74D2, &dcsAddressTable[64] },
  {0xFFFF, nullptr},
  { 0x74D4, &dcsAddressTable[51] },
  {0xFFFF, nullptr},
  { 0x74D6, &dcsAddressTable[4] },
  {0xFFFF, nullptr},
  { 0x74D8, &dcsAddressTable[9] },
  {0xFFFF, nullptr},
  { 0x74DA, &dcsAddressTable[72] },
  {0xFFFF, nullptr},
  { 0x74DC, &dcsAddressTable[103] },
  {0xFFFF, nullptr},
  { 0x74DE, &dcsAddressTable[10] },
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  { 0x7544, &dcsAddressTable[105] },
  {0xFFFF, nullptr},
  { 0x7546, &dcsAddressTable[107] },
  {0xFFFF, nullptr},
  { 0x7548, &dcsAddressTable[106] },
  {0xFFFF, nullptr},
  { 0x754A, &dcsAddressTable[104] },
  {0xFFFF, nullptr},
  { 0x754C, &dcsAddressTable[108] },
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  {0xFFFF, nullptr},
  { 0x7466, &dcsAddressTable[11] },
  {0xFFFF, nullptr},
  { 0x7468, &dcsAddressTable[12] },
  { 0x7469, &dcsAddressTable[13] },
  { 0x746A, &dcsAddressTable[14] },
  { 0x746B, &dcsAddressTable[15] },
  { 0x746C, &dcsAddressTable[16] },
  { 0x7558, &dcsAddressTable[110] },
  { 0x746E, &dcsAddressTable[18] },
  { 0x746F, &dcsAddressTable[19] },
  { 0x7470, &dcsAddressTable[20] },
  { 0x7471, &dcsAddressTable[21] },
  { 0x7472, &dcsAddressTable[22] },
  { 0x7473, &dcsAddressTable[23] },
  { 0x7474, &dcsAddressTable[91] },
  { 0x7475, &dcsAddressTable[92] },
  { 0x7476, &dcsAddressTable[93] },
  { 0x7477, &dcsAddressTable[94] },
  { 0x7478, &dcsAddressTable[95] },
  { 0x7479, &dcsAddressTable[96] },
  { 0x747A, &dcsAddressTable[27] },
  { 0x755E, &dcsAddressTable[109] },
  { 0x747C, &dcsAddressTable[28] },
  { 0x755A, &dcsAddressTable[111] },
  { 0x747E, &dcsAddressTable[29] },
  { 0x756E, &dcsAddressTable[6] },
  { 0x7480, &dcsAddressTable[30] },
  { 0x7570, &dcsAddressTable[8] },
  { 0x7482, &dcsAddressTable[31] },
  { 0x7572, &dcsAddressTable[7] },
  { 0x7483, &dcsAddressTable[32] },
  { 0x7574, &dcsAddressTable[5] },
  { 0x7484, &dcsAddressTable[33] },
  { 0x7576, &dcsAddressTable[0] },
  { 0x7486, &dcsAddressTable[34] },
  { 0x7578, &dcsAddressTable[3] },
  { 0x7487, &dcsAddressTable[35] },
  { 0x757A, &dcsAddressTable[2] },
  { 0x7488, &dcsAddressTable[36] },
  { 0x748A, &dcsAddressTable[38] },
  { 0x748B, &dcsAddressTable[39] },
  { 0x748C, &dcsAddressTable[40] },
  { 0x748D, &dcsAddressTable[41] },
  { 0x748E, &dcsAddressTable[42] },
  { 0x748F, &dcsAddressTable[43] },
  { 0x7490, &dcsAddressTable[44] },
  { 0x7491, &dcsAddressTable[45] },
  { 0x7492, &dcsAddressTable[46] },
  { 0x7493, &dcsAddressTable[47] },
  { 0x7586, &dcsAddressTable[1] },
  { 0x7494, &dcsAddressTable[48] },
  { 0x7495, &dcsAddressTable[49] },
  { 0x7582, &dcsAddressTable[54] },
  { 0x7496, &dcsAddressTable[56] },
  { 0x7497, &dcsAddressTable[57] },
  { 0x7498, &dcsAddressTable[58] },
  { 0x749A, &dcsAddressTable[59] },
  { 0x749B, &dcsAddressTable[60] },
  { 0x749C, &dcsAddressTable[61] },
  { 0x749E, &dcsAddressTable[65] },
  { 0x749F, &dcsAddressTable[66] },
  { 0x74A0, &dcsAddressTable[67] },
  { 0x74A2, &dcsAddressTable[68] },
  { 0x74A3, &dcsAddressTable[69] },
  { 0x74A4, &dcsAddressTable[70] },
  { 0x7584, &dcsAddressTable[74] },
  { 0x757C, &dcsAddressTable[78] },
  { 0x757D, &dcsAddressTable[79] },
  { 0x757E, &dcsAddressTable[80] },
  { 0x757F, &dcsAddressTable[81] },
  { 0x7580, &dcsAddressTable[82] },
  { 0x7581, &dcsAddressTable[83] },
  { 0x74AE, &dcsAddressTable[24] },
  { 0x74AF, &dcsAddressTable[25] },
  { 0x74B0, &dcsAddressTable[26] },
  { 0x74A6, &dcsAddressTable[84] },
  { 0x74B2, &dcsAddressTable[75] },
};

// Simple address hash (modulo)
constexpr uint16_t addrHash(uint16_t addr) {
  return addr % 239;
}

inline const AddressEntry* findDcsOutputEntries(uint16_t addr) {
  uint16_t startH = addrHash(addr);
  for (uint16_t i = 0; i < 239; ++i) {
    uint16_t idx = (startH + i >= 239) ? (startH + i - 239) : (startH + i);
    const auto& entry = dcsAddressHashTable[idx];
    if (entry.addr == 0xFFFF) continue;
    if (entry.addr == addr) return entry.entry;
  }
  return nullptr;
}

struct SelectorEntry { const char* label; const char* dcsCommand; uint16_t value; const char* controlType; uint16_t group; const char* posLabel; };
static const SelectorEntry SelectorMap[] = {
    { "IFEI","IFEI",65535,"analog",0,"LEVEL" },
    { "IFEI_DEC","IFEI",0,"variable_step",0,"DEC" },
    { "IFEI_INC","IFEI",1,"variable_step",0,"INC" },
    { "MODE_SELECTOR_SW_MAN","MODE_SELECTOR_SW",0,"selector",1,"MAN" },
    { "MODE_SELECTOR_SW_OFF","MODE_SELECTOR_SW",1,"selector",1,"OFF" },
    { "MODE_SELECTOR_SW_AUTO","MODE_SELECTOR_SW",2,"selector",1,"AUTO" },
    { "SELECT_HMD_LDDI_RDDI_HMD","SELECT_HMD_LDDI_RDDI",0,"selector",2,"HMD" },
    { "SELECT_HMD_LDDI_RDDI_LDDI","SELECT_HMD_LDDI_RDDI",1,"selector",2,"LDDI" },
    { "SELECT_HMD_LDDI_RDDI_RDDI","SELECT_HMD_LDDI_RDDI",2,"selector",2,"RDDI" },
    { "SELECT_HUD_LDDI_RDDI_HUD","SELECT_HUD_LDDI_RDDI",0,"selector",3,"HUD" },
    { "SELECT_HUD_LDDI_RDDI_LDIR","SELECT_HUD_LDDI_RDDI",1,"selector",3,"LDIR" },
    { "SELECT_HUD_LDDI_RDDI_RDDI","SELECT_HUD_LDDI_RDDI",2,"selector",3,"RDDI" },
    { "IFEI_DWN_BTN","IFEI_DWN_BTN",1,"momentary",0,"PRESS" },
    { "IFEI_ET_BTN","IFEI_ET_BTN",1,"momentary",0,"PRESS" },
    { "IFEI_MODE_BTN","IFEI_MODE_BTN",1,"momentary",0,"PRESS" },
    { "IFEI_QTY_BTN","IFEI_QTY_BTN",1,"momentary",0,"PRESS" },
    { "IFEI_UP_BTN","IFEI_UP_BTN",1,"momentary",0,"PRESS" },
    { "IFEI_ZONE_BTN","IFEI_ZONE_BTN",1,"momentary",0,"PRESS" },
    { "CHART_DIMMER","CHART_DIMMER",65535,"analog",0,"LEVEL" },
    { "CHART_DIMMER_DEC","CHART_DIMMER",0,"variable_step",0,"DEC" },
    { "CHART_DIMMER_INC","CHART_DIMMER",1,"variable_step",0,"INC" },
    { "COCKKPIT_LIGHT_MODE_SW_NVG","COCKKPIT_LIGHT_MODE_SW",0,"selector",4,"NVG" },
    { "COCKKPIT_LIGHT_MODE_SW_NITE","COCKKPIT_LIGHT_MODE_SW",1,"selector",4,"NITE" },
    { "COCKKPIT_LIGHT_MODE_SW_DAY","COCKKPIT_LIGHT_MODE_SW",2,"selector",4,"DAY" },
    { "CONSOLES_DIMMER","CONSOLES_DIMMER",65535,"analog",0,"LEVEL" },
    { "CONSOLES_DIMMER_DEC","CONSOLES_DIMMER",0,"variable_step",0,"DEC" },
    { "CONSOLES_DIMMER_INC","CONSOLES_DIMMER",1,"variable_step",0,"INC" },
    { "FLOOD_DIMMER","FLOOD_DIMMER",65535,"analog",0,"LEVEL" },
    { "FLOOD_DIMMER_DEC","FLOOD_DIMMER",0,"variable_step",0,"DEC" },
    { "FLOOD_DIMMER_INC","FLOOD_DIMMER",1,"variable_step",0,"INC" },
    { "INST_PNL_DIMMER","INST_PNL_DIMMER",65535,"analog",0,"LEVEL" },
    { "INST_PNL_DIMMER_DEC","INST_PNL_DIMMER",0,"variable_step",0,"DEC" },
    { "INST_PNL_DIMMER_INC","INST_PNL_DIMMER",1,"variable_step",0,"INC" },
    { "LIGHTS_TEST_SW_TEST","LIGHTS_TEST_SW",0,"selector",5,"TEST" },
    { "LIGHTS_TEST_SW_OFF","LIGHTS_TEST_SW",1,"selector",5,"OFF" },
    { "WARN_CAUTION_DIMMER","WARN_CAUTION_DIMMER",65535,"analog",0,"LEVEL" },
    { "WARN_CAUTION_DIMMER_DEC","WARN_CAUTION_DIMMER",0,"variable_step",0,"DEC" },
    { "WARN_CAUTION_DIMMER_INC","WARN_CAUTION_DIMMER",1,"variable_step",0,"INC" },
};
static const size_t SelectorMapSize = sizeof(SelectorMap)/sizeof(SelectorMap[0]);

// Unified Command History Table (used for throttling, optional keep-alive, and HID dedupe)
static CommandHistoryEntry commandHistory[] = {
    { "CHART_DIMMER", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "COCKKPIT_LIGHT_MODE_SW", 0, 0, true, 4, 0,   0, false, {0}, {0}, 0 },
    { "CONSOLES_DIMMER", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "FLOOD_DIMMER", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_DWN_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_ET_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_MODE_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_QTY_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_UP_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "IFEI_ZONE_BTN", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "INST_PNL_DIMMER", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
    { "LIGHTS_TEST_SW", 0, 0, true, 5, 0,   0, false, {0}, {0}, 0 },
    { "MODE_SELECTOR_SW", 0, 0, true, 1, 0,   0, false, {0}, {0}, 0 },
    { "SELECT_HMD_LDDI_RDDI", 0, 0, true, 2, 0,   0, false, {0}, {0}, 0 },
    { "SELECT_HUD_LDDI_RDDI", 0, 0, true, 3, 0,   0, false, {0}, {0}, 0 },
    { "WARN_CAUTION_DIMMER", 0, 0, false, 0, 0,   0, false, {0}, {0}, 0 },
};
static const size_t commandHistorySize = sizeof(commandHistory)/sizeof(CommandHistoryEntry);

// --- Auto-generated display string field grouping ---
struct DisplayFieldDef {
    const char* panel;
    const char* label;
    uint16_t base_addr;
    uint8_t  length;
};
static const DisplayFieldDef displayFields[] = {
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_BINGO", 0x7468, 5 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_BINGO_TEXTURE", 0x74C6, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_CLOCK_H", 0x746E, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_CLOCK_M", 0x7470, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_CLOCK_S", 0x7472, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_CODES", 0x74AE, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_DD_1", 0x747A, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_DD_2", 0x747C, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_DD_3", 0x747E, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_DD_4", 0x7480, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_FF_L", 0x7482, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_FF_R", 0x7486, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_FF_TEXTURE", 0x74C0, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_FUEL_DOWN", 0x748A, 6 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_FUEL_UP", 0x7490, 6 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_L0_TEXTURE", 0x74CC, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_L100_TEXTURE", 0x74D4, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_L50_TEXTURE", 0x74D0, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_LPOINTER_TEXTURE", 0x74D8, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_LSCALE_TEXTURE", 0x74C8, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_L_TEXTURE", 0x7582, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_NOZ_TEXTURE", 0x74C2, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_OIL_PRESS_L", 0x7496, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_OIL_PRESS_R", 0x749A, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_OIL_TEXTURE", 0x74C4, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_R0_TEXTURE", 0x74CE, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_R100_TEXTURE", 0x74D6, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_R50_TEXTURE", 0x74D2, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_RPM_L", 0x749E, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_RPM_R", 0x74A2, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_RPM_TEXTURE", 0x74BC, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_RPOINTER_TEXTURE", 0x74DA, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_RSCALE_TEXTURE", 0x74CA, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_R_TEXTURE", 0x7584, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_SP", 0x74B2, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_T", 0x757C, 6 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TEMP_L", 0x74A6, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TEMP_R", 0x74AA, 3 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TEMP_TEXTURE", 0x74BE, 1 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TIMER_H", 0x7474, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TIMER_M", 0x7476, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TIMER_S", 0x7478, 2 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_TIME_SET_MODE", 0x74B6, 6 },
    { "Integrated Fuel/Engine Indicator (IFEI)", "IFEI_Z_TEXTURE", 0x74DC, 1 },
};
static constexpr size_t numDisplayFields = sizeof(displayFields)/sizeof(displayFields[0]);

struct DisplayFieldHashEntry { const char* label; const DisplayFieldDef* def; };
static const DisplayFieldHashEntry displayFieldsByLabel[89] = {
  {nullptr, nullptr},
  {"IFEI_CLOCK_M", &displayFields[3]},
  {"IFEI_FUEL_DOWN", &displayFields[13]},
  {nullptr, nullptr},
  {"IFEI_LSCALE_TEXTURE", &displayFields[19]},
  {"IFEI_NOZ_TEXTURE", &displayFields[21]},
  {"IFEI_RPM_L", &displayFields[28]},
  {"IFEI_CLOCK_S", &displayFields[4]},
  {"IFEI_FF_TEXTURE", &displayFields[12]},
  {"IFEI_BINGO_TEXTURE", &displayFields[1]},
  {nullptr, nullptr},
  {"IFEI_FF_L", &displayFields[10]},
  {"IFEI_RPM_R", &displayFields[29]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_TEMP_TEXTURE", &displayFields[38]},
  {nullptr, nullptr},
  {"IFEI_FF_R", &displayFields[11]},
  {"IFEI_L100_TEXTURE", &displayFields[16]},
  {nullptr, nullptr},
  {"IFEI_L_TEXTURE", &displayFields[20]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_CODES", &displayFields[5]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_R_TEXTURE", &displayFields[33]},
  {"IFEI_R0_TEXTURE", &displayFields[25]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_R50_TEXTURE", &displayFields[27]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_FUEL_UP", &displayFields[14]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_RPOINTER_TEXTURE", &displayFields[31]},
  {nullptr, nullptr},
  {"IFEI_LPOINTER_TEXTURE", &displayFields[18]},
  {"IFEI_T", &displayFields[35]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_TIME_SET_MODE", &displayFields[42]},
  {"IFEI_BINGO", &displayFields[0]},
  {nullptr, nullptr},
  {"IFEI_RSCALE_TEXTURE", &displayFields[32]},
  {"IFEI_TIMER_H", &displayFields[39]},
  {nullptr, nullptr},
  {"IFEI_L50_TEXTURE", &displayFields[17]},
  {"IFEI_OIL_PRESS_L", &displayFields[22]},
  {"IFEI_L0_TEXTURE", &displayFields[15]},
  {"IFEI_OIL_TEXTURE", &displayFields[24]},
  {"IFEI_R100_TEXTURE", &displayFields[26]},
  {"IFEI_RPM_TEXTURE", &displayFields[30]},
  {"IFEI_OIL_PRESS_R", &displayFields[23]},
  {"IFEI_DD_1", &displayFields[6]},
  {"IFEI_DD_2", &displayFields[7]},
  {"IFEI_DD_3", &displayFields[8]},
  {"IFEI_DD_4", &displayFields[9]},
  {"IFEI_SP", &displayFields[34]},
  {"IFEI_TEMP_L", &displayFields[36]},
  {"IFEI_TEMP_R", &displayFields[37]},
  {"IFEI_TIMER_M", &displayFields[40]},
  {"IFEI_TIMER_S", &displayFields[41]},
  {"IFEI_Z_TEXTURE", &displayFields[43]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFEI_CLOCK_H", &displayFields[2]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
};

// Shared recursive hash implementation for display label lookup
constexpr uint16_t labelHash(const char* s);

inline const DisplayFieldDef* findDisplayFieldByLabel(const char* label) {
  uint16_t startH = labelHash(label) % 89;
  for (uint16_t i = 0; i < 89; ++i) {
    uint16_t idx = (startH + i >= 89) ? (startH + i - 89) : (startH + i);
    const auto& entry = displayFieldsByLabel[idx];
    if (!entry.label) continue;
    if (strcmp(entry.label, label) == 0) return entry.def;
  }
  return nullptr;
}


// --- Auto-generated tracked metadata fields ---
struct MetadataState {
    const char* label;
    uint16_t    value;
};
static MetadataState metadataStates[] = {
    { "EXT_FORMATION_LIGHTS", 0 }, // External Aircraft Model: Formation Lights (light green)
    { "EXT_HOOK", 0 }, // External Aircraft Model: Hook
    { "EXT_NOZZLE_POS_L", 0 }, // External Aircraft Model: Left Nozzle Position
    { "EXT_NOZZLE_POS_R", 0 }, // External Aircraft Model: Right Nozzle Position
    { "EXT_POSITION_LIGHT_LEFT", 0 }, // External Aircraft Model: Left Position Light (red)
    { "EXT_POSITION_LIGHT_RIGHT", 0 }, // External Aircraft Model: Right Position Light (green)
    { "EXT_REFUEL_PROBE", 0 }, // External Aircraft Model: Refuel Probe
    { "EXT_REFUEL_PROBE_LIGHT", 0 }, // External Aircraft Model: Refuel Probe Light (white)
    { "EXT_SPEED_BRAKE", 0 }, // External Aircraft Model: Speed Brake
    { "EXT_STAIR", 0 }, // External Aircraft Model: Stair
    { "EXT_STROBE_LIGHTS", 0 }, // External Aircraft Model: Strobe Lights (red)
    { "EXT_TAIL_LIGHT", 0 }, // External Aircraft Model: Tail Light (white)
    { "EXT_WING_FOLDING", 0 }, // External Aircraft Model: Wing Folding
    { "EXT_WOW_LEFT", 0 }, // External Aircraft Model: Weight ON Wheels Left Gear
    { "EXT_WOW_NOSE", 0 }, // External Aircraft Model: Weight ON Wheels Nose Gear
    { "EXT_WOW_RIGHT", 0 }, // External Aircraft Model: Weight ON Wheels Right Gear
};
static const size_t numMetadataStates = sizeof(metadataStates)/sizeof(metadataStates[0]);

struct MetadataHashEntry { const char* label; MetadataState* state; };
static MetadataHashEntry metadataHashTable[37] = {
  {"EXT_REFUEL_PROBE_LIGHT", &metadataStates[7]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_WING_FOLDING", &metadataStates[12]},
  {"EXT_STAIR", &metadataStates[9]},
  {nullptr, nullptr},
  {"EXT_FORMATION_LIGHTS", &metadataStates[0]},
  {nullptr, nullptr},
  {"EXT_WOW_RIGHT", &metadataStates[15]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_TAIL_LIGHT", &metadataStates[11]},
  {"EXT_REFUEL_PROBE", &metadataStates[6]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_POSITION_LIGHT_LEFT", &metadataStates[4]},
  {"EXT_HOOK", &metadataStates[1]},
  {"EXT_STROBE_LIGHTS", &metadataStates[10]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_SPEED_BRAKE", &metadataStates[8]},
  {"EXT_WOW_LEFT", &metadataStates[13]},
  {nullptr, nullptr},
  {"EXT_NOZZLE_POS_L", &metadataStates[2]},
  {"EXT_WOW_NOSE", &metadataStates[14]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_NOZZLE_POS_R", &metadataStates[3]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_POSITION_LIGHT_RIGHT", &metadataStates[5]},
};

constexpr uint16_t metadataHash(const char* s) { return labelHash(s); }

inline MetadataState* findMetadataState(const char* label) {
    uint16_t startH = metadataHash(label) % 37;
    for (uint16_t i = 0; i < 37; ++i) {
        uint16_t idx = (startH + i >= 37) ? (startH + i - 37) : (startH + i);
        const auto& entry = metadataHashTable[idx];
        if (!entry.label) continue;
        if (strcmp(entry.label, label) == 0) return entry.state;
    }
    return nullptr;
}
