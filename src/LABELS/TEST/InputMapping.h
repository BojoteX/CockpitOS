// THIS FILE IS AUTO-GENERATED; ONLY EDIT INDIVIDUAL RECORDS, DO NOT ADD OR DELETE THEM HERE
#pragma once

struct InputMapping {
    const char* label;        // Unique selector label
    const char* source;       // Hardware source identifier
    int8_t     port;         // Port index
    int8_t     bit;          // Bit position
    int8_t      hidId;        // HID usage ID
    const char* oride_label;  // Override command label (dcsCommand)
    uint16_t    oride_value;  // Override command value (value)
    const char* controlType;  // Control type, e.g., "selector"
    uint16_t    group;        // Group ID for exclusive selectors
};

//  label                       source     port bit hidId  DCSCommand           value   Type        group
static const InputMapping InputMappings[] = {
    { "COM_AUX"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_AUX"           , 0xFFFF , "analog"       ,  0 },
    { "COM_AUX_CUSTOM_POS0"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_AUX"           ,     0 , "variable_step",  0 },
    { "COM_AUX_CUSTOM_POS1"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_AUX"           ,     1 , "variable_step",  0 },
    { "COM_COMM_G_XMT_SW_COMM_1", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_G_XMT_SW" ,     2 , "selector"     ,  1 },
    { "COM_COMM_G_XMT_SW_OFF"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_G_XMT_SW" ,     1 , "selector"     ,  1 },
    { "COM_COMM_G_XMT_SW_COMM_2", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_G_XMT_SW" ,     0 , "selector"     ,  1 },
    { "COM_COMM_RELAY_SW_CIPHER", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_RELAY_SW" ,     2 , "selector"     ,  2 },
    { "COM_COMM_RELAY_SW_OFF"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_RELAY_SW" ,     1 , "selector"     ,  2 },
    { "COM_COMM_RELAY_SW_PLAIN" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_COMM_RELAY_SW" ,     0 , "selector"     ,  2 },
    { "COM_CRYPTO_SW_HOLD"      , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_CRYPTO_SW"     ,     2 , "selector"     ,  3 },
    { "COM_CRYPTO_SW_NORM"      , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_CRYPTO_SW"     ,     1 , "selector"     ,  3 },
    { "COM_CRYPTO_SW_ZERO"      , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_CRYPTO_SW"     ,     0 , "selector"     ,  3 },
    { "COM_ICS"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ICS"           , 0xFFFF , "analog"       ,  0 },
    { "COM_ICS_CUSTOM_POS0"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ICS"           ,     0 , "variable_step",  0 },
    { "COM_ICS_CUSTOM_POS1"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ICS"           ,     1 , "variable_step",  0 },
    { "COM_IFF_MASTER_SW_EMER"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_IFF_MASTER_SW" ,     1 , "selector"     ,  4 },
    { "COM_IFF_MASTER_SW_NORM"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_IFF_MASTER_SW" ,     0 , "selector"     ,  4 },
    { "COM_IFF_MODE4_SW_POS0"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_IFF_MODE4_SW"  ,     0 , "selector"     ,  6 },
    { "COM_IFF_MODE4_SW_POS1"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_IFF_MODE4_SW"  ,     1 , "selector"     ,  6 },
    { "COM_IFF_MODE4_SW_POS2"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_IFF_MODE4_SW"  ,     2 , "selector"     ,  6 },
    { "COM_ILS_CHANNEL_SW_POS0" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     0 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS1" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     1 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS2" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     2 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS3" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     3 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS4" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     4 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS5" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     5 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS6" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     6 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS7" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     7 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS8" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     8 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS9" , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",     9 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS10", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    10 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS11", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    11 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS12", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    12 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS13", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    13 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS14", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    14 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS15", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    15 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS16", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    16 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS17", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    17 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS18", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    18 , "selector"     ,  7 },
    { "COM_ILS_CHANNEL_SW_POS19", "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW",    19 , "selector"     ,  7 },
    { "COM_ILS_UFC_MAN_SW_UFC"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_UFC_MAN_SW",     1 , "selector"     ,  5 },
    { "COM_ILS_UFC_MAN_SW_MAN"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_UFC_MAN_SW",     0 , "selector"     ,  5 },
    { "COM_MIDS_A"              , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_A"        , 0xFFFF , "analog"       ,  0 },
    { "COM_MIDS_A_CUSTOM_POS0"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_A"        ,     0 , "variable_step",  0 },
    { "COM_MIDS_A_CUSTOM_POS1"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_A"        ,     1 , "variable_step",  0 },
    { "COM_MIDS_B"              , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_B"        , 0xFFFF , "analog"       ,  0 },
    { "COM_MIDS_B_CUSTOM_POS0"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_B"        ,     0 , "variable_step",  0 },
    { "COM_MIDS_B_CUSTOM_POS1"  , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_MIDS_B"        ,     1 , "variable_step",  0 },
    { "COM_RWR"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_RWR"           , 0xFFFF , "analog"       ,  0 },
    { "COM_RWR_CUSTOM_POS0"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_RWR"           ,     0 , "variable_step",  0 },
    { "COM_RWR_CUSTOM_POS1"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_RWR"           ,     1 , "variable_step",  0 },
    { "COM_TACAN"               , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_TACAN"         , 0xFFFF , "analog"       ,  0 },
    { "COM_TACAN_CUSTOM_POS0"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_TACAN"         ,     0 , "variable_step",  0 },
    { "COM_TACAN_CUSTOM_POS1"   , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_TACAN"         ,     1 , "variable_step",  0 },
    { "COM_VOX"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_VOX"           , 0xFFFF , "analog"       ,  0 },
    { "COM_VOX_CUSTOM_POS0"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_VOX"           ,     0 , "variable_step",  0 },
    { "COM_VOX_CUSTOM_POS1"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_VOX"           ,     1 , "variable_step",  0 },
    { "COM_WPN"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_WPN"           , 0xFFFF , "analog"       ,  0 },
    { "COM_WPN_CUSTOM_POS0"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_WPN"           ,     0 , "variable_step",  0 },
    { "COM_WPN_CUSTOM_POS1"     , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_WPN"           ,     1 , "variable_step",  0 },
    { "FCS_RESET_BTN"           , "PCA_0x00" ,  0 ,  0 ,  -1 , "FCS_RESET_BTN"     ,     1 , "momentary"    ,  0 },
    { "GAIN_SWITCH_POS0"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "GAIN_SWITCH"       ,     0 , "selector"     ,  8 },
    { "GAIN_SWITCH_POS1"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "GAIN_SWITCH"       ,     1 , "selector"     ,  8 },
    { "GAIN_SWITCH_COVER"       , "PCA_0x00" ,  0 ,  0 ,  -1 , "GAIN_SWITCH_COVER" ,     1 , "momentary"    ,  0 },
    { "RUD_TRIM"                , "PCA_0x00" ,  0 ,  0 ,  -1 , "RUD_TRIM"          , 0xFFFF , "analog"       ,  0 },
    { "RUD_TRIM_CUSTOM_POS0"    , "PCA_0x00" ,  0 ,  0 ,  -1 , "RUD_TRIM"          ,     0 , "variable_step",  0 },
    { "RUD_TRIM_CUSTOM_POS1"    , "PCA_0x00" ,  0 ,  0 ,  -1 , "RUD_TRIM"          ,     1 , "variable_step",  0 },
    { "TO_TRIM_BTN"             , "PCA_0x00" ,  0 ,  0 ,  -1 , "TO_TRIM_BTN"       ,     1 , "momentary"    ,  0 },
    { "RADALT_HEIGHT_POS0"      , "PCA_0x00" ,  0 ,  0 ,  -1 , "RADALT_HEIGHT"     ,     0 , "variable_step",  0 },
    { "RADALT_HEIGHT_POS1"      , "PCA_0x00" ,  0 ,  0 ,  -1 , "RADALT_HEIGHT"     ,     1 , "variable_step",  0 },
    { "RADALT_TEST_SW"          , "PCA_0x00" ,  0 ,  0 ,  -1 , "RADALT_TEST_SW"    ,     1 , "momentary"    ,  0 },
};
static const size_t InputMappingSize = sizeof(InputMappings)/sizeof(InputMappings[0]);

// Auto-generated: selector DCS labels with group > 0 (panel sync)
static const char* const TrackedSelectorLabels[] = {
    "COM_COMM_G_XMT_SW",
    "COM_COMM_RELAY_SW",
    "COM_CRYPTO_SW",
    "COM_IFF_MASTER_SW",
    "COM_IFF_MODE4_SW",
    "COM_ILS_CHANNEL_SW",
    "COM_ILS_UFC_MAN_SW",
    "GAIN_SWITCH",
};
static const size_t TrackedSelectorLabelsCount = sizeof(TrackedSelectorLabels)/sizeof(TrackedSelectorLabels[0]);


// Static hash lookup table for InputMappings[]
struct InputHashEntry { const char* label; const InputMapping* mapping; };
static const InputHashEntry inputHashTable[149] = {
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_MIDS_A_CUSTOM_POS0", &InputMappings[43]},
  {"COM_MIDS_A_CUSTOM_POS1", &InputMappings[44]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_COMM_RELAY_SW_CIPHER", &InputMappings[6]},
  {nullptr, nullptr},
  {"COM_COMM_G_XMT_SW_OFF", &InputMappings[4]},
  {"COM_COMM_RELAY_SW_OFF", &InputMappings[7]},
  {"COM_CRYPTO_SW_HOLD", &InputMappings[9]},
  {"COM_ICS_CUSTOM_POS0", &InputMappings[13]},
  {"COM_ICS_CUSTOM_POS1", &InputMappings[14]},
  {"COM_AUX", &InputMappings[0]},
  {"COM_IFF_MASTER_SW_NORM", &InputMappings[16]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_AUX_CUSTOM_POS0", &InputMappings[1]},
  {"COM_AUX_CUSTOM_POS1", &InputMappings[2]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_COMM_RELAY_SW_PLAIN", &InputMappings[8]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_MIDS_B_CUSTOM_POS0", &InputMappings[46]},
  {"COM_MIDS_B_CUSTOM_POS1", &InputMappings[47]},
  {nullptr, nullptr},
  {"COM_VOX", &InputMappings[54]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_WPN_CUSTOM_POS0", &InputMappings[58]},
  {"COM_WPN_CUSTOM_POS1", &InputMappings[59]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_RWR_CUSTOM_POS0", &InputMappings[49]},
  {"COM_ILS_CHANNEL_SW_POS0", &InputMappings[20]},
  {"COM_ILS_CHANNEL_SW_POS1", &InputMappings[21]},
  {"COM_ILS_CHANNEL_SW_POS2", &InputMappings[22]},
  {"COM_ILS_CHANNEL_SW_POS3", &InputMappings[23]},
  {"COM_ILS_CHANNEL_SW_POS4", &InputMappings[24]},
  {"COM_ILS_CHANNEL_SW_POS5", &InputMappings[25]},
  {"COM_ILS_CHANNEL_SW_POS6", &InputMappings[26]},
  {"COM_ILS_CHANNEL_SW_POS7", &InputMappings[27]},
  {"COM_ILS_CHANNEL_SW_POS8", &InputMappings[28]},
  {"COM_ILS_CHANNEL_SW_POS9", &InputMappings[29]},
  {"COM_RWR_CUSTOM_POS1", &InputMappings[50]},
  {"GAIN_SWITCH_POS0", &InputMappings[61]},
  {"GAIN_SWITCH_POS1", &InputMappings[62]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_ILS_UFC_MAN_SW_MAN", &InputMappings[41]},
  {nullptr, nullptr},
  {"RADALT_TEST_SW", &InputMappings[70]},
  {nullptr, nullptr},
  {"TO_TRIM_BTN", &InputMappings[67]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"RADALT_HEIGHT_POS0", &InputMappings[68]},
  {"RADALT_HEIGHT_POS1", &InputMappings[69]},
  {nullptr, nullptr},
  {"FCS_RESET_BTN", &InputMappings[60]},
  {"COM_ICS", &InputMappings[12]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_CRYPTO_SW_NORM", &InputMappings[10]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_IFF_MODE4_SW_POS0", &InputMappings[17]},
  {"COM_IFF_MODE4_SW_POS1", &InputMappings[18]},
  {"COM_IFF_MODE4_SW_POS2", &InputMappings[19]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_WPN", &InputMappings[57]},
  {nullptr, nullptr},
  {"RUD_TRIM_CUSTOM_POS0", &InputMappings[65]},
  {"COM_TACAN", &InputMappings[51]},
  {"RUD_TRIM_CUSTOM_POS1", &InputMappings[66]},
  {"COM_RWR", &InputMappings[48]},
  {nullptr, nullptr},
  {"COM_CRYPTO_SW_ZERO", &InputMappings[11]},
  {nullptr, nullptr},
  {"COM_COMM_G_XMT_SW_COMM_1", &InputMappings[3]},
  {"COM_COMM_G_XMT_SW_COMM_2", &InputMappings[5]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_ILS_CHANNEL_SW_POS10", &InputMappings[30]},
  {"COM_ILS_CHANNEL_SW_POS11", &InputMappings[31]},
  {"COM_ILS_CHANNEL_SW_POS12", &InputMappings[32]},
  {"COM_ILS_CHANNEL_SW_POS13", &InputMappings[33]},
  {"COM_ILS_CHANNEL_SW_POS14", &InputMappings[34]},
  {"COM_ILS_CHANNEL_SW_POS15", &InputMappings[35]},
  {"COM_ILS_CHANNEL_SW_POS16", &InputMappings[36]},
  {"COM_ILS_CHANNEL_SW_POS17", &InputMappings[37]},
  {"COM_ILS_CHANNEL_SW_POS18", &InputMappings[38]},
  {"COM_ILS_CHANNEL_SW_POS19", &InputMappings[39]},
  {"COM_MIDS_A", &InputMappings[42]},
  {"COM_MIDS_B", &InputMappings[45]},
  {"COM_TACAN_CUSTOM_POS0", &InputMappings[52]},
  {"COM_TACAN_CUSTOM_POS1", &InputMappings[53]},
  {"GAIN_SWITCH_COVER", &InputMappings[63]},
  {"COM_IFF_MASTER_SW_EMER", &InputMappings[15]},
  {"COM_VOX_CUSTOM_POS0", &InputMappings[55]},
  {"COM_VOX_CUSTOM_POS1", &InputMappings[56]},
  {"COM_ILS_UFC_MAN_SW_UFC", &InputMappings[40]},
  {"RUD_TRIM", &InputMappings[64]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
};

// Shared recursive hash implementation for display label lookup
constexpr uint16_t labelHash(const char* s);


// Preserve existing signature
constexpr uint16_t inputHash(const char* s) { return labelHash(s); }

inline const InputMapping* findInputByLabel(const char* label) {
  uint16_t startH = inputHash(label) % 149;
  for (uint16_t i = 0; i < 149; ++i) {
    uint16_t idx = (startH + i >= 149) ? (startH + i - 149) : (startH + i);
    const auto& entry = inputHashTable[idx];
    if (!entry.label) continue;
    if (strcmp(entry.label, label) == 0) return entry.mapping;
  }
  return nullptr;
}
