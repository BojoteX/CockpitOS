// THIS FILE IS AUTO-GENERATED; ONLY EDIT INDIVIDUAL RECORDS, DO NOT ADD OR DELETE THEM HERE
#pragma once

struct InputMapping {
    const char* label;        // Unique selector label, auto-generated.
    const char* source;      // Hardware source identifier. (e.g PCA_0x26, HC165, GPIO, NONE etc)
    int8_t     port;           // Port index (For PCA use port 0 or 1, HC165 does not use port. For GPIO use PIN and use -1 when sharing GPIOs to differentiate HIGH/LOW)
    int8_t     bit;            // Bit position is used for PCA & HC165. GPIO also uses it but ONLY for one-hot selectors (GPIO assigned for each position) in such cases set as -1
    int8_t      hidId;        // HID usage ID
    const char* oride_label;  // Override command label (dcsCommand)
    uint16_t    oride_value;  // Override command value (value)
    const char* controlType;  // Control type, e.g., "selector"
    uint16_t    group;        // Group ID for exclusive selectors
};

//  label                       source     port bit hidId  DCSCommand           value   Type        group
static const InputMapping InputMappings[] = {
    { "COMM1_ANT_SELECT_SW_UPPER"       , "HC165" ,  0 , 13 ,  -1 , "COMM1_ANT_SELECT_SW"   ,     2 , "selector"     ,  1 },
    { "COMM1_ANT_SELECT_SW_AUTO"        , "HC165" ,  0 , -1 ,  -1 , "COMM1_ANT_SELECT_SW"   ,     1 , "selector"     ,  1 },
    { "COMM1_ANT_SELECT_SW_LOWER"       , "HC165" ,  0 , 14 ,  -1 , "COMM1_ANT_SELECT_SW"   ,     0 , "selector"     ,  1 },
    { "IFF_ANT_SELECT_SW_UPPER"         , "HC165" ,  0 , 15 ,  -1 , "IFF_ANT_SELECT_SW"     ,     2 , "selector"     ,  2 },
    { "IFF_ANT_SELECT_SW_BOTH"          , "HC165" ,  0 , -1 ,  -1 , "IFF_ANT_SELECT_SW"     ,     1 , "selector"     ,  2 },
    { "IFF_ANT_SELECT_SW_LOWER"         , "HC165" ,  0 ,  0 ,  -1 , "IFF_ANT_SELECT_SW"     ,     0 , "selector"     ,  2 },
    { "APU_CONTROL_SW_ON"               , "HC165" ,  0 , -1 ,  -1 , "APU_CONTROL_SW"        ,     1 , "selector"     ,  3 },
    { "APU_CONTROL_SW_OFF"              , "HC165" ,  0 , 10 ,  -1 , "APU_CONTROL_SW"        ,     0 , "selector"     ,  3 },
    { "ENGINE_CRANK_SW_LEFT"            , "HC165" ,  0 , 11 ,  -1 , "ENGINE_CRANK_SW"       ,     2 , "selector"     ,  4 },
    { "ENGINE_CRANK_SW_OFF"             , "HC165" ,  0 , -1 ,  -1 , "ENGINE_CRANK_SW"       ,     1 , "selector"     ,  4 },
    { "ENGINE_CRANK_SW_RIGHT"           , "HC165" ,  0 , 12 ,  -1 , "ENGINE_CRANK_SW"       ,     0 , "selector"     ,  4 },
    { "COM_AUX"                         , "GPIO" ,  4 ,  0 ,  -1 , "COM_AUX"               , 65535 , "analog"       ,  0 },
    { "COM_AUX_DEC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_AUX"               ,     0 , "variable_step",  0 },
    { "COM_AUX_INC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_AUX"               ,     1 , "variable_step",  0 },
    { "COM_COMM_G_XMT_SW_COMM_1"        , "HC165" ,  0 , 26 ,  -1 , "COM_COMM_G_XMT_SW"     ,     2 , "selector"     ,  5 },
    { "COM_COMM_G_XMT_SW_OFF"           , "HC165" ,  0 , -1 ,  -1 , "COM_COMM_G_XMT_SW"     ,     1 , "selector"     ,  5 },
    { "COM_COMM_G_XMT_SW_COMM_2"        , "HC165" ,  0 , 25 ,  -1 , "COM_COMM_G_XMT_SW"     ,     0 , "selector"     ,  5 },
    { "COM_COMM_RELAY_SW_CIPHER"        , "HC165" ,  0 , 22 ,  -1 , "COM_COMM_RELAY_SW"     ,     2 , "selector"     ,  6 },
    { "COM_COMM_RELAY_SW_OFF"           , "HC165" ,  0 , -1 ,  -1 , "COM_COMM_RELAY_SW"     ,     1 , "selector"     ,  6 },
    { "COM_COMM_RELAY_SW_PLAIN"         , "HC165" ,  0 , 21 ,  -1 , "COM_COMM_RELAY_SW"     ,     0 , "selector"     ,  6 },
    { "COM_CRYPTO_SW_HOLD"              , "HC165" ,  0 , 39 ,  -1 , "COM_CRYPTO_SW"         ,     2 , "selector"     ,  7 },
    { "COM_CRYPTO_SW_NORM"              , "HC165" ,  0 , -1 ,  -1 , "COM_CRYPTO_SW"         ,     1 , "selector"     ,  7 },
    { "COM_CRYPTO_SW_ZERO"              , "HC165" ,  0 , 38 ,  -1 , "COM_CRYPTO_SW"         ,     0 , "selector"     ,  7 },
    { "COM_ICS"                         , "GPIO" ,  1 ,  0 ,  -1 , "COM_ICS"               , 65535 , "analog"       ,  0 },
    { "COM_ICS_DEC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_ICS"               ,     0 , "variable_step",  0 },
    { "COM_ICS_INC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_ICS"               ,     1 , "variable_step",  0 },
    { "COM_IFF_MASTER_SW_EMER"          , "HC165" ,  0 , -1 ,  -1 , "COM_IFF_MASTER_SW"     ,     1 , "selector"     ,  8 },
    { "COM_IFF_MASTER_SW_NORM"          , "HC165" ,  0 , 35 ,  -1 , "COM_IFF_MASTER_SW"     ,     0 , "selector"     ,  8 },
    { "COM_IFF_MODE4_SW_POS0"           , "HC165" ,  0 , 37 ,  -1 , "COM_IFF_MODE4_SW"      ,     0 , "selector"     ,  9 },
    { "COM_IFF_MODE4_SW_POS1"           , "HC165" ,  0 , -1 ,  -1 , "COM_IFF_MODE4_SW"      ,     1 , "selector"     ,  9 },
    { "COM_IFF_MODE4_SW_POS2"           , "HC165" ,  0 , 36 ,  -1 , "COM_IFF_MODE4_SW"      ,     2 , "selector"     ,  9 },
    { "COM_ILS_CHANNEL_SW_POS0"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     0 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS1"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     1 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS2"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     2 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS3"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     3 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS4"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     4 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS5"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     5 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS6"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     6 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS7"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     7 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS8"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     8 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS9"         , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     9 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS10"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    10 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS11"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    11 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS12"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    12 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS13"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    13 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS14"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    14 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS15"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    15 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS16"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    16 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS17"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    17 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS18"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    18 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_POS19"        , "PCA_0x00" ,  0 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,    19 , "selector"     ,  0 },
    { "COM_ILS_CHANNEL_SW_DEC"          , "GPIO" , 33 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     0 , "fixed_step"   ,  0 },
    { "COM_ILS_CHANNEL_SW_INC"          , "GPIO" , 21 ,  0 ,  -1 , "COM_ILS_CHANNEL_SW"    ,     1 , "fixed_step"   ,  0 },
    { "COM_ILS_UFC_MAN_SW_UFC"          , "HC165" ,  0 , -1 ,  -1 , "COM_ILS_UFC_MAN_SW"    ,     1 , "selector"     , 10 },
    { "COM_ILS_UFC_MAN_SW_MAN"          , "HC165" ,  0 , 34 ,  -1 , "COM_ILS_UFC_MAN_SW"    ,     0 , "selector"     , 10 },
    { "COM_MIDS_A"                      , "GPIO" ,  3 ,  0 ,  -1 , "COM_MIDS_A"            , 65535 , "analog"       ,  0 },
    { "COM_MIDS_A_DEC"                  , "NONE" ,  0 ,  0 ,  -1 , "COM_MIDS_A"            ,     0 , "variable_step",  0 },
    { "COM_MIDS_A_INC"                  , "NONE" ,  0 ,  0 ,  -1 , "COM_MIDS_A"            ,     1 , "variable_step",  0 },
    { "COM_MIDS_B"                      , "GPIO" ,  7 ,  0 ,  -1 , "COM_MIDS_B"            , 65535 , "analog"       ,  0 },
    { "COM_MIDS_B_DEC"                  , "NONE" ,  0 ,  0 ,  -1 , "COM_MIDS_B"            ,     0 , "variable_step",  0 },
    { "COM_MIDS_B_INC"                  , "NONE" ,  0 ,  0 ,  -1 , "COM_MIDS_B"            ,     1 , "variable_step",  0 },
    { "COM_RWR"                         , "GPIO" ,  6 ,  0 ,  -1 , "COM_RWR"               , 65535 , "analog"       ,  0 },
    { "COM_RWR_DEC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_RWR"               ,     0 , "variable_step",  0 },
    { "COM_RWR_INC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_RWR"               ,     1 , "variable_step",  0 },
    { "COM_TACAN"                       , "GPIO" , 16 ,  0 ,  -1 , "COM_TACAN"             , 65535 , "analog"       ,  0 },
    { "COM_TACAN_DEC"                   , "NONE" ,  0 ,  0 ,  -1 , "COM_TACAN"             ,     0 , "variable_step",  0 },
    { "COM_TACAN_INC"                   , "NONE" ,  0 ,  0 ,  -1 , "COM_TACAN"             ,     1 , "variable_step",  0 },
    { "COM_VOX"                         , "GPIO" ,  5 ,  0 ,  -1 , "COM_VOX"               , 65535 , "analog"       ,  0 },
    { "COM_VOX_DEC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_VOX"               ,     0 , "variable_step",  0 },
    { "COM_VOX_INC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_VOX"               ,     1 , "variable_step",  0 },
    { "COM_WPN"                         , "GPIO" ,  2 ,  0 ,  -1 , "COM_WPN"               , 65535 , "analog"       ,  0 },
    { "COM_WPN_DEC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_WPN"               ,     0 , "variable_step",  0 },
    { "COM_WPN_INC"                     , "NONE" ,  0 ,  0 ,  -1 , "COM_WPN"               ,     1 , "variable_step",  0 },
    { "FCS_RESET_BTN"                   , "HC165" ,  0 , 24 ,  -1 , "FCS_RESET_BTN"         ,     1 , "momentary"    ,  0 },
    { "GAIN_SWITCH_POS0"                , "HC165" ,  0 , 32 ,  -1 , "GAIN_SWITCH"           ,     0 , "selector"     , 11 },
    { "GAIN_SWITCH_POS1"                , "HC165" ,  0 , -1 ,  -1 , "GAIN_SWITCH"           ,     1 , "selector"     , 11 },
    { "GAIN_SWITCH_COVER"               , "NONE" ,  0 ,  0 ,  -1 , "GAIN_SWITCH_COVER"     ,     1 , "momentary"    ,  0 },
    { "RUD_TRIM"                        , "NONE" ,  0 ,  0 ,  -1 , "RUD_TRIM"              , 65535 , "analog"       ,  0 },
    { "RUD_TRIM_DEC"                    , "GPIO" , 18 ,  0 ,  -1 , "RUD_TRIM"              ,     0 , "variable_step",  0 },
    { "RUD_TRIM_INC"                    , "GPIO" , 40 ,  0 ,  -1 , "RUD_TRIM"              ,     1 , "variable_step",  0 },
    { "TO_TRIM_BTN"                     , "HC165" ,  0 ,  8 ,  -1 , "TO_TRIM_BTN"           ,     1 , "momentary"    ,  0 },
    { "EXT_CNT_TANK_SW_STOP"            , "HC165" ,  0 , 20 ,  -1 , "EXT_CNT_TANK_SW"       ,     2 , "selector"     , 12 },
    { "EXT_CNT_TANK_SW_NORM"            , "HC165" ,  0 , -1 ,  -1 , "EXT_CNT_TANK_SW"       ,     1 , "selector"     , 12 },
    { "EXT_CNT_TANK_SW_ORIDE"           , "HC165" ,  0 , 19 ,  -1 , "EXT_CNT_TANK_SW"       ,     0 , "selector"     , 12 },
    { "EXT_WNG_TANK_SW_STOP"            , "HC165" ,  0 , 17 ,  -1 , "EXT_WNG_TANK_SW"       ,     2 , "selector"     , 13 },
    { "EXT_WNG_TANK_SW_NORM"            , "HC165" ,  0 , -1 ,  -1 , "EXT_WNG_TANK_SW"       ,     1 , "selector"     , 13 },
    { "EXT_WNG_TANK_SW_ORIDE"           , "HC165" ,  0 , 16 ,  -1 , "EXT_WNG_TANK_SW"       ,     0 , "selector"     , 13 },
    { "FUEL_DUMP_SW_ON"                 , "HC165" ,  0 , -1 ,  -1 , "FUEL_DUMP_SW"          ,     1 , "selector"     , 14 },
    { "FUEL_DUMP_SW_OFF"                , "HC165" ,  0 , 18 ,  -1 , "FUEL_DUMP_SW"          ,     0 , "selector"     , 14 },
    { "PROBE_SW_EXTEND"                 , "HC165" ,  0 , 31 ,  -1 , "PROBE_SW"              ,     2 , "selector"     , 15 },
    { "PROBE_SW_RETRACT"                , "HC165" ,  0 , -1 ,  -1 , "PROBE_SW"              ,     1 , "selector"     , 15 },
    { "PROBE_SW_EMERG_EXTD"             , "HC165" ,  0 , 30 ,  -1 , "PROBE_SW"              ,     0 , "selector"     , 15 },
    { "CHART_DIMMER"                    , "NONE" ,  0 ,  0 ,  -1 , "CHART_DIMMER"          , 65535 , "analog"       ,  0 },
    { "CHART_DIMMER_DEC"                , "NONE" ,  0 ,  0 ,  -1 , "CHART_DIMMER"          ,     0 , "variable_step",  0 },
    { "CHART_DIMMER_INC"                , "NONE" ,  0 ,  0 ,  -1 , "CHART_DIMMER"          ,     1 , "variable_step",  0 },
    { "COCKKPIT_LIGHT_MODE_SW_NVG"      , "NONE" ,  0 ,  0 ,  -1 , "COCKKPIT_LIGHT_MODE_SW",     2 , "selector"     ,  0 },
    { "COCKKPIT_LIGHT_MODE_SW_NITE"     , "NONE" ,  0 ,  0 ,  -1 , "COCKKPIT_LIGHT_MODE_SW",     1 , "selector"     ,  0 },
    { "COCKKPIT_LIGHT_MODE_SW_DAY"      , "NONE" ,  0 ,  0 ,  -1 , "COCKKPIT_LIGHT_MODE_SW",     0 , "selector"     ,  0 },
    { "CONSOLES_DIMMER"                 , "NONE" ,  0 ,  0 ,  -1 , "CONSOLES_DIMMER"       , 65535 , "analog"       ,  0 },
    { "CONSOLES_DIMMER_DEC"             , "NONE" ,  0 ,  0 ,  -1 , "CONSOLES_DIMMER"       ,     0 , "variable_step",  0 },
    { "CONSOLES_DIMMER_INC"             , "NONE" ,  0 ,  0 ,  -1 , "CONSOLES_DIMMER"       ,     1 , "variable_step",  0 },
    { "FLOOD_DIMMER"                    , "NONE" ,  0 ,  0 ,  -1 , "FLOOD_DIMMER"          , 65535 , "analog"       ,  0 },
    { "FLOOD_DIMMER_DEC"                , "NONE" ,  0 ,  0 ,  -1 , "FLOOD_DIMMER"          ,     0 , "variable_step",  0 },
    { "FLOOD_DIMMER_INC"                , "NONE" ,  0 ,  0 ,  -1 , "FLOOD_DIMMER"          ,     1 , "variable_step",  0 },
    { "INST_PNL_DIMMER"                 , "NONE" ,  0 ,  0 ,  -1 , "INST_PNL_DIMMER"       , 65535 , "analog"       ,  0 },
    { "INST_PNL_DIMMER_DEC"             , "NONE" ,  0 ,  0 ,  -1 , "INST_PNL_DIMMER"       ,     0 , "variable_step",  0 },
    { "INST_PNL_DIMMER_INC"             , "NONE" ,  0 ,  0 ,  -1 , "INST_PNL_DIMMER"       ,     1 , "variable_step",  0 },
    { "LIGHTS_TEST_SW_TEST"             , "NONE" ,  0 ,  0 ,  -1 , "LIGHTS_TEST_SW"        ,     1 , "selector"     ,  0 },
    { "LIGHTS_TEST_SW_OFF"              , "NONE" ,  0 ,  0 ,  -1 , "LIGHTS_TEST_SW"        ,     0 , "selector"     ,  0 },
    { "WARN_CAUTION_DIMMER"             , "NONE" ,  0 ,  0 ,  -1 , "WARN_CAUTION_DIMMER"   , 65535 , "analog"       ,  0 },
    { "WARN_CAUTION_DIMMER_DEC"         , "NONE" ,  0 ,  0 ,  -1 , "WARN_CAUTION_DIMMER"   ,     0 , "variable_step",  0 },
    { "WARN_CAUTION_DIMMER_INC"         , "NONE" ,  0 ,  0 ,  -1 , "WARN_CAUTION_DIMMER"   ,     1 , "variable_step",  0 },
    { "OBOGS_SW_ON"                     , "HC165" ,  0 , -1 ,  -1 , "OBOGS_SW"              ,     1 , "selector"     , 16 },
    { "OBOGS_SW_OFF"                    , "HC165" ,  0 , 29 ,  -1 , "OBOGS_SW"              ,     0 , "selector"     , 16 },
    { "OXY_FLOW"                        , "GPIO" , 14 ,  0 ,  -1 , "OXY_FLOW"              , 65535 , "analog"       ,  0 },
    { "OXY_FLOW_DEC"                    , "NONE" ,  0 ,  0 ,  -1 , "OXY_FLOW"              ,     0 , "variable_step",  0 },
    { "OXY_FLOW_INC"                    , "NONE" ,  0 ,  0 ,  -1 , "OXY_FLOW"              ,     1 , "variable_step",  0 },
    { "LEFT_VIDEO_BIT"                  , "PCA_0x00" ,  0 ,  0 ,  -1 , "LEFT_VIDEO_BIT"        ,     1 , "momentary"    ,  0 },
    { "NUC_WPN_SW_ENABLE"               , "HC165" ,  0 , -1 ,  -1 , "NUC_WPN_SW"            ,     1 , "selector"     , 17 },
    { "NUC_WPN_SW_DISABLE_(NO_FUNCTION)", "HC165" ,  0 ,  3 ,  -1 , "NUC_WPN_SW"            ,     0 , "selector"     , 17 },
    { "RIGHT_VIDEO_BIT"                 , "PCA_0x00" ,  0 ,  0 ,  -1 , "RIGHT_VIDEO_BIT"       ,     1 , "momentary"    ,  0 },
};
static const size_t InputMappingSize = sizeof(InputMappings)/sizeof(InputMappings[0]);

// Auto-generated: selector DCS labels with group > 0 (panel sync)
static const char* const TrackedSelectorLabels[] = {
    "APU_CONTROL_SW",
    "COMM1_ANT_SELECT_SW",
    "COM_COMM_G_XMT_SW",
    "COM_COMM_RELAY_SW",
    "COM_CRYPTO_SW",
    "COM_IFF_MASTER_SW",
    "COM_IFF_MODE4_SW",
    "COM_ILS_UFC_MAN_SW",
    "ENGINE_CRANK_SW",
    "EXT_CNT_TANK_SW",
    "EXT_WNG_TANK_SW",
    "FUEL_DUMP_SW",
    "GAIN_SWITCH",
    "IFF_ANT_SELECT_SW",
    "NUC_WPN_SW",
    "OBOGS_SW",
    "PROBE_SW",
};
static const size_t TrackedSelectorLabelsCount = sizeof(TrackedSelectorLabels)/sizeof(TrackedSelectorLabels[0]);


// Static hash lookup table for InputMappings[]
struct InputHashEntry { const char* label; const InputMapping* mapping; };
static const InputHashEntry inputHashTable[251] = {
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"IFF_ANT_SELECT_SW_LOWER", &InputMappings[5]},
  {"COM_WPN", &InputMappings[70]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"CONSOLES_DIMMER_DEC", &InputMappings[99]},
  {nullptr, nullptr},
  {"COM_RWR_DEC", &InputMappings[62]},
  {"COM_WPN_INC", &InputMappings[72]},
  {nullptr, nullptr},
  {"CHART_DIMMER_INC", &InputMappings[94]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_ILS_CHANNEL_SW_INC", &InputMappings[52]},
  {"COCKKPIT_LIGHT_MODE_SW_NITE", &InputMappings[96]},
  {"ENGINE_CRANK_SW_LEFT", &InputMappings[8]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_WNG_TANK_SW_NORM", &InputMappings[85]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_MIDS_B_INC", &InputMappings[60]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"FUEL_DUMP_SW_OFF", &InputMappings[88]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_WPN_DEC", &InputMappings[71]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"CHART_DIMMER_DEC", &InputMappings[93]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_ILS_CHANNEL_SW_DEC", &InputMappings[51]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"OBOGS_SW_ON", &InputMappings[112]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_MIDS_B_DEC", &InputMappings[59]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_RWR", &InputMappings[61]},
  {"COM_AUX", &InputMappings[11]},
  {"EXT_WNG_TANK_SW_STOP", &InputMappings[84]},
  {"COM_ICS_INC", &InputMappings[25]},
  {"COM_VOX_INC", &InputMappings[69]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"ENGINE_CRANK_SW_OFF", &InputMappings[9]},
  {nullptr, nullptr},
  {"OXY_FLOW", &InputMappings[114]},
  {nullptr, nullptr},
  {"COM_MIDS_A", &InputMappings[55]},
  {"COM_MIDS_B", &InputMappings[58]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_MIDS_A_INC", &InputMappings[57]},
  {nullptr, nullptr},
  {"FLOOD_DIMMER", &InputMappings[101]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"RUD_TRIM_INC", &InputMappings[79]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"APU_CONTROL_SW_OFF", &InputMappings[7]},
  {nullptr, nullptr},
  {"COM_ICS_DEC", &InputMappings[24]},
  {"COM_VOX_DEC", &InputMappings[68]},
  {"EXT_CNT_TANK_SW_NORM", &InputMappings[82]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"TO_TRIM_BTN", &InputMappings[80]},
  {nullptr, nullptr},
  {"COMM1_ANT_SELECT_SW_AUTO", &InputMappings[1]},
  {"COM_COMM_RELAY_SW_PLAIN", &InputMappings[19]},
  {nullptr, nullptr},
  {"PROBE_SW_EXTEND", &InputMappings[89]},
  {"COM_COMM_RELAY_SW_CIPHER", &InputMappings[17]},
  {"COM_ILS_UFC_MAN_SW_MAN", &InputMappings[54]},
  {"WARN_CAUTION_DIMMER_INC", &InputMappings[111]},
  {"COM_MIDS_A_DEC", &InputMappings[56]},
  {"OBOGS_SW_OFF", &InputMappings[113]},
  {nullptr, nullptr},
  {"COM_CRYPTO_SW_ZERO", &InputMappings[22]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"RUD_TRIM_DEC", &InputMappings[78]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_TACAN", &InputMappings[64]},
  {nullptr, nullptr},
  {"RUD_TRIM", &InputMappings[77]},
  {"LIGHTS_TEST_SW_TEST", &InputMappings[107]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COMM1_ANT_SELECT_SW_UPPER", &InputMappings[0]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"WARN_CAUTION_DIMMER_DEC", &InputMappings[110]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COM_ICS", &InputMappings[23]},
  {"COM_VOX", &InputMappings[67]},
  {"EXT_CNT_TANK_SW_STOP", &InputMappings[81]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COCKKPIT_LIGHT_MODE_SW_DAY", &InputMappings[97]},
  {"FLOOD_DIMMER_INC", &InputMappings[103]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"CONSOLES_DIMMER", &InputMappings[98]},
  {"EXT_CNT_TANK_SW_ORIDE", &InputMappings[83]},
  {"FUEL_DUMP_SW_ON", &InputMappings[87]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"COMM1_ANT_SELECT_SW_LOWER", &InputMappings[2]},
  {"COCKKPIT_LIGHT_MODE_SW_NVG", &InputMappings[95]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"LEFT_VIDEO_BIT", &InputMappings[117]},
  {"COM_AUX_INC", &InputMappings[13]},
  {nullptr, nullptr},
  {"PROBE_SW_RETRACT", &InputMappings[90]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"FCS_RESET_BTN", &InputMappings[73]},
  {nullptr, nullptr},
  {"LIGHTS_TEST_SW_OFF", &InputMappings[108]},
  {"NUC_WPN_SW_ENABLE", &InputMappings[118]},
  {"FLOOD_DIMMER_DEC", &InputMappings[102]},
  {nullptr, nullptr},
  {"ENGINE_CRANK_SW_RIGHT", &InputMappings[10]},
  {"COM_COMM_G_XMT_SW_COMM_1", &InputMappings[14]},
  {"COM_COMM_G_XMT_SW_COMM_2", &InputMappings[16]},
  {"COM_CRYPTO_SW_NORM", &InputMappings[21]},
  {"NUC_WPN_SW_DISABLE_(NO_FUNCTION)", &InputMappings[119]},
  {"OXY_FLOW_INC", &InputMappings[116]},
  {"COM_IFF_MODE4_SW_POS0", &InputMappings[28]},
  {"COM_IFF_MODE4_SW_POS1", &InputMappings[29]},
  {"COM_IFF_MODE4_SW_POS2", &InputMappings[30]},
  {"COM_ILS_UFC_MAN_SW_UFC", &InputMappings[53]},
  {"COM_COMM_RELAY_SW_OFF", &InputMappings[18]},
  {nullptr, nullptr},
  {"COM_TACAN_INC", &InputMappings[66]},
  {"COM_IFF_MASTER_SW_NORM", &InputMappings[27]},
  {nullptr, nullptr},
  {"COM_ILS_CHANNEL_SW_POS10", &InputMappings[41]},
  {"COM_ILS_CHANNEL_SW_POS11", &InputMappings[42]},
  {"COM_ILS_CHANNEL_SW_POS12", &InputMappings[43]},
  {"COM_ILS_CHANNEL_SW_POS13", &InputMappings[44]},
  {"COM_ILS_CHANNEL_SW_POS14", &InputMappings[45]},
  {"COM_AUX_DEC", &InputMappings[12]},
  {"IFF_ANT_SELECT_SW_BOTH", &InputMappings[4]},
  {"COM_ILS_CHANNEL_SW_POS15", &InputMappings[46]},
  {"COM_ILS_CHANNEL_SW_POS0", &InputMappings[31]},
  {"COM_ILS_CHANNEL_SW_POS1", &InputMappings[32]},
  {"COM_ILS_CHANNEL_SW_POS2", &InputMappings[33]},
  {"COM_ILS_CHANNEL_SW_POS3", &InputMappings[34]},
  {"COM_IFF_MASTER_SW_EMER", &InputMappings[26]},
  {"COM_ILS_CHANNEL_SW_POS4", &InputMappings[35]},
  {"COM_ILS_CHANNEL_SW_POS5", &InputMappings[36]},
  {"COM_ILS_CHANNEL_SW_POS6", &InputMappings[37]},
  {"COM_CRYPTO_SW_HOLD", &InputMappings[20]},
  {"COM_ILS_CHANNEL_SW_POS7", &InputMappings[38]},
  {"COM_ILS_CHANNEL_SW_POS8", &InputMappings[39]},
  {"COM_ILS_CHANNEL_SW_POS9", &InputMappings[40]},
  {"IFF_ANT_SELECT_SW_UPPER", &InputMappings[3]},
  {"COM_ILS_CHANNEL_SW_POS16", &InputMappings[47]},
  {"COM_ILS_CHANNEL_SW_POS17", &InputMappings[48]},
  {"COM_ILS_CHANNEL_SW_POS18", &InputMappings[49]},
  {"COM_ILS_CHANNEL_SW_POS19", &InputMappings[50]},
  {"GAIN_SWITCH_POS0", &InputMappings[74]},
  {"GAIN_SWITCH_POS1", &InputMappings[75]},
  {"GAIN_SWITCH_COVER", &InputMappings[76]},
  {"COM_RWR_INC", &InputMappings[63]},
  {"COM_TACAN_DEC", &InputMappings[65]},
  {"COM_COMM_G_XMT_SW_OFF", &InputMappings[15]},
  {"PROBE_SW_EMERG_EXTD", &InputMappings[91]},
  {"CONSOLES_DIMMER_INC", &InputMappings[100]},
  {"INST_PNL_DIMMER", &InputMappings[104]},
  {"INST_PNL_DIMMER_INC", &InputMappings[106]},
  {"WARN_CAUTION_DIMMER", &InputMappings[109]},
  {"APU_CONTROL_SW_ON", &InputMappings[6]},
  {"OXY_FLOW_DEC", &InputMappings[115]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"CHART_DIMMER", &InputMappings[92]},
  {nullptr, nullptr},
  {"INST_PNL_DIMMER_DEC", &InputMappings[105]},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {nullptr, nullptr},
  {"EXT_WNG_TANK_SW_ORIDE", &InputMappings[86]},
  {"RIGHT_VIDEO_BIT", &InputMappings[120]},
  {nullptr, nullptr},
  {nullptr, nullptr},
};

// Shared recursive hash implementation for display label lookup
constexpr uint16_t labelHash(const char* s);


// Preserve existing signature
constexpr uint16_t inputHash(const char* s) { return labelHash(s); }

inline const InputMapping* findInputByLabel(const char* label) {
  uint16_t startH = inputHash(label) % 251;
  for (uint16_t i = 0; i < 251; ++i) {
    uint16_t idx = (startH + i >= 251) ? (startH + i - 251) : (startH + i);
    const auto& entry = inputHashTable[idx];
    if (!entry.label) continue;
    if (strcmp(entry.label, label) == 0) return entry.mapping;
  }
  return nullptr;
}
