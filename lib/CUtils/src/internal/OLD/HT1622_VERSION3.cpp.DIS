// HT1622 library for ESP32 Arduino Core 3.0+

#include "soc/gpio_struct.h"
#include "driver/gpio.h"

// Strict protocol timing (datasheet, 3V):
#define HT1622_WR_MIN_US   4   // Min WR low or high pulse width (≥3.34 us, round up for margin)
#define HT1622_DATA_SU_NS 120  // Data setup before WR↑ (≥120 ns)
#define HT1622_DATA_H_NS  600  // Data hold after WR↑ (≥600 ns)
#define HT1622_CS_SETUP_NS 600 // CS setup before WR (≥500 ns)
#define HT1622_CS_HOLD_NS 800  // CS hold after last WR (≥700 ns)

HT1622::HT1622(uint8_t cs, uint8_t wr, uint8_t data)
    : _cs(cs), _wr(wr), _data(data) {
}

void HT1622::init() {
    pinMode(_cs, OUTPUT);
    pinMode(_wr, OUTPUT);
    pinMode(_data, OUTPUT);

    setCS(true); setWR(true); setDATA(true);
    delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);

    sendCmd(0x00); // SYS DIS
    sendCmd(0x18); // RC 32K
    sendCmd(0x29); // BIAS
    sendCmd(0x01); // SYS EN

    // Optional: soft reset (factory recommends)
    setCS(false); delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);
    writeCommandBits(0xE3, 8); // Built-in soft reset sequence (datasheet)
    setCS(true); delayMicroseconds(HT1622_CS_HOLD_NS / 1000 + 1);

    sendCmd(0x03); // LCD ON
    clear();
}

void HT1622::sendCmd(uint8_t cmd) {
    setCS(false);
    delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);

    // Command mode: 1 0 0
    writeBitStrict(1); writeBitStrict(0); writeBitStrict(0);

    writeCommandBits(cmd, 8);

    writeBitStrict(0); // Don't care
    setCS(true);
    delayMicroseconds(HT1622_CS_HOLD_NS / 1000 + 1);
}

void HT1622::writeNibble(uint8_t addr, uint8_t nibble) {
    setCS(false);
    delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);

    // Write mode: 1 0 1
    writeBitStrict(1); writeBitStrict(0); writeBitStrict(1);

    // 6-bit address, MSB first
    for (int i = 5; i >= 0; i--) writeBitStrict((addr >> i) & 1);
    // 4-bit data, LSB first
    for (int i = 0; i < 4; i++) writeBitStrict((nibble >> i) & 1);

    setCS(true);
    delayMicroseconds(HT1622_CS_HOLD_NS / 1000 + 1);
}

void HT1622::commitBurstRMT(const uint8_t* shadow) {
    rmt_data_t wrBuffer[272], dataBuffer[272];
    int symbolIndex = 0;

    auto appendBit = [&](bool bit) {
        wrBuffer[symbolIndex].duration0 = HT1622_WR_MIN_US;
        wrBuffer[symbolIndex].level0 = 0;
        wrBuffer[symbolIndex].duration1 = HT1622_WR_MIN_US;
        wrBuffer[symbolIndex].level1 = 1;
        dataBuffer[symbolIndex].duration0 = HT1622_WR_MIN_US;
        dataBuffer[symbolIndex].level0 = bit;
        dataBuffer[symbolIndex].duration1 = HT1622_WR_MIN_US;
        dataBuffer[symbolIndex].level1 = bit;
        symbolIndex++;
        };

    // 3-bit write mode: 1 0 1 (MSB first)
    appendBit(1); appendBit(0); appendBit(1);
    // 6-bit addr (MSB first, start at 0)
    for (int b = 5; b >= 0; --b) appendBit((0 >> b) & 1);

    // 64 nibbles (256 bits), data LSB first per nibble
    for (int addr = 0; addr < 64; ++addr) {
        uint8_t val = shadow[addr] & 0xF;
        for (int b = 0; b < 4; ++b) appendBit((val >> b) & 1);
    }

    setCS(false);
    delayMicroseconds(1);
    rmtWrite(_wr, wrBuffer, symbolIndex, RMT_WAIT_FOR_EVER);
    rmtWrite(_data, dataBuffer, symbolIndex, RMT_WAIT_FOR_EVER);
    setCS(true);
    delayMicroseconds(1);
}

void HT1622::commitBurst(const uint8_t* shadow) {
    setCS(false);
    delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);

    writeBitStrict(1); writeBitStrict(0); writeBitStrict(1);
    for (int i = 5; i >= 0; --i) writeBitStrict((0 >> i) & 1); // Start at addr 0

    for (int addr = 0; addr < HT1622_RAM_SIZE; ++addr) {
        uint8_t val = shadow[addr] & 0xF;
        for (int b = 0; b < 4; ++b)
            writeBitStrict((val >> b) & 1);  // LSB first
    }

    setCS(true);
    delayMicroseconds(HT1622_CS_HOLD_NS / 1000 + 1);
}

void HT1622::commit(const uint8_t* shadow, uint8_t* lastShadow, int shadowLen) {
    bool dirty = false;
    for (int addr = 0; addr < shadowLen; ++addr) {
        if ((shadow[addr] & 0xF) != (lastShadow[addr] & 0xF)) {
            dirty = true;
            break;
        }
    }
    if (!dirty) return;
	// commitBurstRMT(shadow); // DOES NOT WORK WITH RMT
    commitBurst(shadow);
    for (int addr = 0; addr < shadowLen; ++addr)
        lastShadow[addr] = shadow[addr] & 0xF;
}

void HT1622::commitPartial(const uint8_t* shadow, uint8_t* lastShadow,
    uint8_t addrStart, uint8_t addrEnd) {
    bool dirty = false;
    for (uint8_t addr = addrStart; addr <= addrEnd; ++addr) {
        if ((shadow[addr] & 0xF) != (lastShadow[addr] & 0xF)) {
            dirty = true;
            break;
        }
    }
    if (!dirty) return;

    setCS(false);
    delayMicroseconds(HT1622_CS_SETUP_NS / 1000 + 1);

    writeBitStrict(1); writeBitStrict(0); writeBitStrict(1);
    for (int i = 5; i >= 0; --i) writeBitStrict((addrStart >> i) & 1);

    for (uint8_t addr = addrStart; addr <= addrEnd; ++addr) {
        uint8_t val = shadow[addr] & 0xF;
        for (int b = 0; b < 4; ++b) writeBitStrict((val >> b) & 1);
        lastShadow[addr] = val;
    }

    setCS(true);
    delayMicroseconds(HT1622_CS_HOLD_NS / 1000 + 1);
}

void HT1622::allSegmentsOn() {
    for (int addr = 0; addr < 64; ++addr)
        writeNibble(addr, 0xF);
}

void HT1622::allSegmentsOff() {
    clear();
}

void HT1622::clear() {
    for (int addr = 0; addr < 64; ++addr)
        writeNibble(addr, 0x0);
}

void HT1622::invalidateLastShadow(uint8_t* lastShadow, int shadowLen) {
    for (int i = 0; i < shadowLen; ++i)
        lastShadow[i] = 0xFF;
}

// ----------------------
// Low-level, timing-precise protocol routines
// ----------------------

inline void HT1622::setWR(bool level) {
    gpio_set_level((gpio_num_t)_wr, level);
}
inline void HT1622::setCS(bool level) {
    gpio_set_level((gpio_num_t)_cs, level);
}
inline void HT1622::setDATA(bool level) {
    gpio_set_level((gpio_num_t)_data, level);
}

inline void HT1622::writeBitStrict(bool bit) {
    setDATA(bit);
    // Data setup time before WR↓ (not critical, but >120 ns)
    delayMicroseconds(1);

    setWR(false);    // WR falling edge
    delayMicroseconds(HT1622_WR_MIN_US); // WR low width (≥3.34 us)

    setWR(true);     // WR rising edge (data latched here)
    delayMicroseconds(HT1622_WR_MIN_US); // WR high width (≥3.34 us)
    // Data hold after WR↑ (≥600 ns, covered by WR high time)
}

inline void HT1622::writeCommandBits(uint16_t bits, uint8_t len) {
    // MSB first
    for (int i = len - 1; i >= 0; i--) writeBitStrict((bits >> i) & 1);
}