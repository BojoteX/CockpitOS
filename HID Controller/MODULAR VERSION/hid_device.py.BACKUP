import hid
from config import USB_VID, USB_PID, HANDSHAKE_REQ, DEFAULT_REPORT_SIZE, FEATURE_REPORT_ID, IDLE_TIMEOUT, reply_addr
import time

def list_target_devices():
    return [d for d in hid.enumerate() if d['vendor_id'] == USB_VID and d['product_id'] == USB_PID]

def try_fifo_handshake(dev, uiq=None, device_name=None):
    payload = HANDSHAKE_REQ.ljust(DEFAULT_REPORT_SIZE, b'\x00')
    attempts = 0
    while True:
        try:
            resp = dev.get_feature_report(FEATURE_REPORT_ID, DEFAULT_REPORT_SIZE + 1)
            d = bytes(resp[1:]) if len(resp) > DEFAULT_REPORT_SIZE else bytes(resp)
            msg = d.rstrip(b'\x00')
            if msg == HANDSHAKE_REQ:
                return True
        except Exception as e:
            if uiq: uiq.put(('handshake', device_name, f"GET FEATURE exception: {e}"))
            # Device error during handshake: abort handshake immediately!
            try:
                dev.close()
            except Exception:
                pass
            return False
        try:
            dev.send_feature_report(bytes([FEATURE_REPORT_ID]) + payload)
        except Exception as e:
            if uiq: uiq.put(('handshake', device_name, f"SET FEATURE exception: {e}"))
            try:
                dev.close()
            except Exception:
                pass
            return False
        try:
            resp = dev.get_feature_report(FEATURE_REPORT_ID, DEFAULT_REPORT_SIZE + 1)
            d = bytes(resp[1:]) if len(resp) > DEFAULT_REPORT_SIZE else bytes(resp)
            msg = d.rstrip(b'\x00')
            if msg == HANDSHAKE_REQ:
                return True
        except Exception as e:
            if uiq: uiq.put(('handshake', device_name, f"GET FEATURE exception: {e}"))
            try:
                dev.close()
            except Exception:
                pass
            return False
        attempts += 1
        if attempts % 10 == 0 and uiq:
            uiq.put(('handshake', device_name, "Waiting for handshake..."))
        time.sleep(0.2)

class DeviceEntry:
    def __init__(self, dev, dev_info):
        self.dev = dev
        self.info = dev_info
        self.name = (dev_info.get('product_string','') or '') + " [" + (dev_info.get('serial_number','') or '') + "]"
        self.status = "WAIT HANDSHAKE"
        self.last_sent = time.time()
        self.disconnected = False
        self.handshaked = False
        self.reconnections = 0

    def check(self):
        now = time.time()
        if self.disconnected:
            self.status = "OFF"
        elif (now - self.last_sent) > IDLE_TIMEOUT:
            self.status = "IDLE"
        else:
            self.status = "RECV"

def device_reader(entry, uiq, udp_send):
    dev = entry.dev
    global reply_addr
    try:
        # Handshake phase
        while not entry.handshaked and not entry.disconnected:
            entry.handshaked = try_fifo_handshake(dev, uiq=uiq, device_name=entry.name)
            if not entry.handshaked:
                # If handshake fails, mark as disconnected and exit thread
                entry.disconnected = True
                try:
                    dev.close()
                except Exception:
                    pass
                uiq.put(('status', entry.name, "DISCONNECTED"))
                return
            uiq.put(('status', entry.name, "READY"))
            uiq.put(('log', entry.name, "Handshake complete, ready to process input."))
            entry.status = "READY"

        # Wait for reply_addr (DCS mission start)
        if reply_addr is None and not entry.disconnected:
            uiq.put(('log', entry.name, "Waiting for DCS mission start..."))
        while reply_addr[0] is None and not entry.disconnected:
            time.sleep(0.2)
        if entry.disconnected:
            try:
                dev.close()
            except Exception:
                pass
            return
        uiq.put(('log', entry.name, f"DCS detected on {reply_addr[0]} â€” Starting normal operation."))

        # Buffer drain with robust error handling
        try:
            for _ in range(10):
                try:
                    resp = dev.get_feature_report(FEATURE_REPORT_ID, DEFAULT_REPORT_SIZE + 1)
                    d = bytes(resp[1:]) if len(resp) > DEFAULT_REPORT_SIZE else bytes(resp)
                    if not any(d):
                        break
                except Exception as e:
                    entry.disconnected = True
                    try:
                        dev.close()
                    except Exception:
                        pass
                    uiq.put(('status', entry.name, "DISCONNECTED"))
                    return
        except Exception:
            entry.disconnected = True
            try:
                dev.close()
            except Exception:
                pass
            uiq.put(('status', entry.name, "DISCONNECTED"))
            return

        # Main polling loop with robust error handling
        while not entry.disconnected and entry.handshaked:
            try:
                data = dev.read(DEFAULT_REPORT_SIZE, timeout_ms=0)
                if data:
                    try:
                        resp = dev.get_feature_report(FEATURE_REPORT_ID, DEFAULT_REPORT_SIZE + 1)
                        d = bytes(resp[1:]) if len(resp) > DEFAULT_REPORT_SIZE else bytes(resp)
                        msg = d.rstrip(b'\x00').decode(errors="replace").strip()
                        if msg and msg != HANDSHAKE_REQ.decode():
                            uiq.put(('log', entry.name, f"IN: {msg}"))
                            udp_send(msg + "\r\n")
                    except Exception as e:
                        entry.disconnected = True
                        try:
                            dev.close()
                        except Exception:
                            pass
                        uiq.put(('status', entry.name, "DISCONNECTED"))
                        return
            except Exception as e:
                entry.disconnected = True
                try:
                    dev.close()
                except Exception:
                    pass
                uiq.put(('status', entry.name, "DISCONNECTED"))
                return
    except Exception as e:
        entry.disconnected = True
        try:
            dev.close()
        except Exception:
            pass
        uiq.put(('status', entry.name, "DISCONNECTED"))
        return